/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.HMM_Model;
import java.io.File;
import java.sql.ResultSet;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;

// Jamie: Gradient libraries
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.BorderFactory;


/**
 *
 * @author anu
 */
public class HMM_ModelUI extends javax.swing.JFrame {

    //** Global Variables   
    
    // Jamie:
    // Global search variables:
    String booleanSearchMode = "AND"; // preset starting value as AND
    
    // Jamie:
    //Create a file chooser. Taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
    final JFileChooser folderSelector = new JFileChooser();
    final JFileChooser fileSelector = new JFileChooser();
    

 
    // ** Global Database Variables
    String ip;
    String passStr;
    DBConnect connect;
    String db;
    String user;
    String dbport;
    String ConnectionName;
    ArrayList taxonomyFields;
    //JLabel jLabel_ConnectionStatus;
    
    // Anu:
    //** Manage Query Group Variables 
    javax.swing.tree.DefaultMutableTreeNode searchQuerytreeNode1;
    // these are commented out because they were conflicting with teh JTree. Anu will address...
  //  TreePath[] query_groups;
  //  javax.swing.JScrollPane jScrollPane_SearchFieldsScrollPanel;
  //  javax.swing.JTree jTree_SearchFields;

  
    //** Query Group List 
    DefaultListModel listModel = new DefaultListModel();  
    ArrayList taxonomyCategoriesList = new ArrayList();
    
    
    /**
     * Creates new form HMM_ModelUI
     */
    public HMM_ModelUI() {
        // Jamie: initialize various elements that normally go in a setup() function

       // initialize folderSelector so it only opens directories
       folderSelector.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
       folderSelector.setAcceptAllFileFilterUsed(false);
                      
       initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jMenu1 = new javax.swing.JMenu();
        HomologScan_buttonGroup = new javax.swing.ButtonGroup();
        AdjustHeader_buttonGroup = new javax.swing.ButtonGroup();
        InputGroup_buttonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel_ConnectedIcon = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Home = new javax.swing.JPanel();
        Container_Title = new javax.swing.JPanel();
        jLabel_Title = new javax.swing.JLabel();
        jLabel1_Subtitle = new javax.swing.JLabel();
        jLabel_Name1 = new javax.swing.JLabel();
        jLabel_Name2 = new javax.swing.JLabel();
        jLabel_Name3 = new javax.swing.JLabel();
        jLabel_GuttmanLab = new javax.swing.JLabel();
        jLabel_CSBDept = new javax.swing.JLabel();
        jLabel_UniversityOfToronto = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ConnectToDB = new javax.swing.JPanel();
        Container_SelectDB = new javax.swing.JPanel();
        jLabel_ConnectionName = new javax.swing.JLabel();
        portnumber = new javax.swing.JTextField();
        jLabel_UserName = new javax.swing.JLabel();
        UserName = new javax.swing.JTextField();
        jLabel_Password = new javax.swing.JLabel();
        Password = new javax.swing.JPasswordField();
        jButton_TestConnection = new javax.swing.JButton();
        jLabel_ConnectionStatus = new javax.swing.JLabel();
        jButton_ConnectToDB = new javax.swing.JButton();
        jLabel_ConnectToDBStatus = new javax.swing.JLabel();
        jLabel_RecentDBs = new javax.swing.JLabel();
        jComboBox_RecentDBList = new javax.swing.JComboBox();
        jButton_ClearRecentDBList = new javax.swing.JButton();
        jLabel_Database = new javax.swing.JLabel();
        DBName = new javax.swing.JTextField();
        DBConnection = new javax.swing.JTextField();
        jLabel_port = new javax.swing.JLabel();
        IPAddress = new javax.swing.JTextField();
        jLabel_IPAddress2 = new javax.swing.JLabel();
        jLabel_ConnectToDB = new javax.swing.JLabel();
        PipelineConfigScrollPanel = new javax.swing.JScrollPane();
        PipelineConfig = new javax.swing.JPanel();
        Container_Analysis = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        Container_Sequence = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel26 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        Container_SequenceDirectory = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        QueryDirectoryFileLoader = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        ReferenceDirectoryFolderPathTextBox = new javax.swing.JTextField();
        ReferenceDirectoryFolderLoader = new javax.swing.JButton();
        QueryDirectoryFolderPathTextBox = new javax.swing.JTextField();
        Container_Group = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        GroupFilePathTextBox = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        GroupDistancePathTextBox = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jLabel32 = new javax.swing.JLabel();
        GroupAlignmentDirectoryPathTextBox = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        GroupModelDirectoryPathTextBox = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        GroupSingletonDirectoryPathTextBox = new javax.swing.JTextField();
        GroupDistanceFileSelector = new javax.swing.JButton();
        GroupAlignmentDirectoryFileSelector = new javax.swing.JButton();
        GroupModelDirectoryFileSelector = new javax.swing.JButton();
        GroupSingletonDirectoryFileSelector = new javax.swing.JButton();
        GroupFileFileSelector = new javax.swing.JButton();
        Container_Database = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        HMMDatabasePathTextBox = new javax.swing.JTextField();
        HMMDatabaseFileSelector = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        SequenceDatabasePathTextBox = new javax.swing.JTextField();
        SequenceDatabaseFileSelector = new javax.swing.JButton();
        Container_CoreGenome = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        CoreGenomeAccuracyThresholdSlider = new javax.swing.JSlider();
        CoreGenomeAccuracyThresholdTextBox = new javax.swing.JTextField();
        CoreGenomeAccuracyThresholdDefault = new javax.swing.JButton();
        Container_HMMERParameters = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        SequenceEValueTextBox = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        DomainEValueTextBox = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        IncludeSequenceEValueTextBox = new javax.swing.JTextField();
        IncludeDomainEvalueTextBox = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        SequenceEValueDefault = new javax.swing.JButton();
        DomainEValueDefault = new javax.swing.JButton();
        IncludeSequenceEvalueDefault = new javax.swing.JButton();
        IncludeDomainDefault = new javax.swing.JButton();
        Container_Reference = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox();
        Container_ResultParsingParameters = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        NumberDomainComboBox = new javax.swing.JComboBox();
        jLabel55 = new javax.swing.JLabel();
        AccuracyThresholdSlider = new javax.swing.JSlider();
        SequenceIdentitySlider = new javax.swing.JSlider();
        SequenceSimilaritySlider = new javax.swing.JSlider();
        QueryCoverageSlider = new javax.swing.JSlider();
        TargetCoverageSlider = new javax.swing.JSlider();
        MinimumPartialCoverageSlider = new javax.swing.JSlider();
        NumberDomainSlider = new javax.swing.JSlider();
        ChimeraAccuracySlider = new javax.swing.JSlider();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        AccuracyThresholdTextBox = new javax.swing.JTextField();
        SequenceIdentityTextBox = new javax.swing.JTextField();
        SequenceSimilarityTextBox = new javax.swing.JTextField();
        QueryCoverageTextBox = new javax.swing.JTextField();
        ChimeraAccuracyTextBox = new javax.swing.JTextField();
        TargetCoverageTextBox = new javax.swing.JTextField();
        MinimumPartialCoverageTextBox = new javax.swing.JTextField();
        ChimeraSimilarityTextBox = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        ChimeraIdentityTextBox = new javax.swing.JTextField();
        ChimeraIdentitySlider = new javax.swing.JSlider();
        ChimeraSimilaritySlider = new javax.swing.JSlider();
        NumberDomainDefault = new javax.swing.JButton();
        AccuracyThresholdDefault = new javax.swing.JButton();
        SequenceIdentityDefault = new javax.swing.JButton();
        SequenceSimilarityDefault = new javax.swing.JButton();
        QueryCoverageDefault = new javax.swing.JButton();
        TargetCoverageDefault = new javax.swing.JButton();
        ChimeraIdentityDefault = new javax.swing.JButton();
        ChimaraSimilarityDefault = new javax.swing.JButton();
        ChimeraAccuaracyDefault = new javax.swing.JButton();
        MinimumPartialCoverageDefault = new javax.swing.JButton();
        jLabel_PipelineConfig = new javax.swing.JLabel();
        Container_SaveLoadRun = new javax.swing.JPanel();
        jButton_SaveSettings = new javax.swing.JButton();
        jButton_LoadSettings = new javax.swing.JButton();
        jButton_DefaultSettings = new javax.swing.JButton();
        jButton_RunPipeline = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        QueryBuilder = new javax.swing.JPanel();
        jPanel_BuildQueryGroup = new javax.swing.JPanel();
        jScrollPane_SearchFieldsScrollPanel = new javax.swing.JScrollPane();
        jTree_SearchFields = new javax.swing.JTree();
        jButton2 = new javax.swing.JButton();
        canvas1 = new java.awt.Canvas();
        jLabel3 = new javax.swing.JLabel();
        jPanel_ManageQueryGroups = new javax.swing.JPanel();
        jButton_ClearGroup = new javax.swing.JButton();
        jButton_EditGroup = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton_EditGroup1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Search = new javax.swing.JPanel();
        jLabel_Search = new javax.swing.JLabel();
        Container_BooleanSearch = new javax.swing.JPanel();
        jLabel_A = new javax.swing.JLabel();
        jComboBox_BooleanOperator = new javax.swing.JComboBox();
        jLabel_B = new javax.swing.JLabel();
        jTextArea_SearchBinA = new javax.swing.JTextArea();
        jTextArea_SearchBinB = new javax.swing.JTextArea();
        jButton_ClearBinB = new javax.swing.JButton();
        jButton_ClearBinA = new javax.swing.JButton();
        jButton_BuildSQLquery = new javax.swing.JButton();
        vennDiagram = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Container_Action = new javax.swing.JPanel();
        jButton_NewSearch = new javax.swing.JButton();
        jButton_LoadSearch = new javax.swing.JButton();
        jButton_SaveSearch = new javax.swing.JButton();
        Container_QueryBuilder = new javax.swing.JPanel();
        jButton_SubmitSearch = new javax.swing.JButton();
        jTextField_SQLsearchQuery = new javax.swing.JTextField();
        jLabel_SearchString = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3_QueryGroups = new javax.swing.JPanel();
        jScrollPanel_QueryGroups1 = new javax.swing.JScrollPane();
        jList_QueryGroups1 = new javax.swing.JList();
        jLabel_InstructionsLine3 = new javax.swing.JLabel();
        jLabel_InstructionsLine4 = new javax.swing.JLabel();
        jButton_AssignToBinA1 = new javax.swing.JButton();
        jButton_AssignToBinB1 = new javax.swing.JButton();
        jPanel3_ResultGroups = new javax.swing.JPanel();
        jScrollPanel_QueryGroups3 = new javax.swing.JScrollPane();
        jList_QueryGroups3 = new javax.swing.JList();
        jLabel_InstructionsLine7 = new javax.swing.JLabel();
        jLabel_InstructionsLine8 = new javax.swing.JLabel();
        jButton_AssignToBinA3 = new javax.swing.JButton();
        jButton_AssignResultsToBinB = new javax.swing.JButton();
        Results = new javax.swing.JPanel();
        jLabel_Results = new javax.swing.JLabel();
        jScrollPane_ResultsWindowScrollPanel = new javax.swing.JScrollPane();
        jTable_ResultsWindow = new javax.swing.JTable();
        jButton_SaveResults = new javax.swing.JButton();
        jButton_ClearResults = new javax.swing.JButton();
        ResultsGroup = new javax.swing.JButton();
        Help = new javax.swing.JPanel();
        jLabel_Help = new javax.swing.JLabel();
        jScrollPanel_HelpContentsScrollPanel = new javax.swing.JScrollPane();
        jTextArea_HelpContents = new javax.swing.JTextArea();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(130, 173, 215));
        setMinimumSize(new java.awt.Dimension(1200, 720));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(130, 170, 210));
        jPanel1.setMaximumSize(new java.awt.Dimension(1250, 715));
        jPanel1.setMinimumSize(new java.awt.Dimension(1250, 715));
        jPanel1.setPreferredSize(new java.awt.Dimension(1230, 715));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel_ConnectedIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/DB-idle.png"))); // NOI18N
        jLabel_ConnectedIcon.setToolTipText("Not connected to database.");
        jLabel_ConnectedIcon.setMaximumSize(new java.awt.Dimension(40, 40));
        jLabel_ConnectedIcon.setMinimumSize(new java.awt.Dimension(40, 40));
        jLabel_ConnectedIcon.setPreferredSize(new java.awt.Dimension(40, 40));
        jLabel_ConnectedIcon.setRequestFocusEnabled(false);
        jLabel_ConnectedIcon.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jLabel_ConnectedIconPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 0, 50);
        jPanel1.add(jLabel_ConnectedIcon, gridBagConstraints);

        jTabbedPane1.setBackground(new java.awt.Color(153, 204, 255));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAlignmentX(0.0F);
        jTabbedPane1.setAlignmentY(0.0F);
        jTabbedPane1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(1200, 700));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(1200, 700));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1200, 700));

        Home.setBackground(new java.awt.Color(153, 204, 255));
        Home.setMaximumSize(new java.awt.Dimension(1200, 700));
        Home.setMinimumSize(new java.awt.Dimension(1200, 700));
        Home.setPreferredSize(new java.awt.Dimension(1200, 700));
        Home.setSize(new java.awt.Dimension(40, 40));
        Home.setLayout(new java.awt.GridBagLayout());

        Container_Title.setBackground(new java.awt.Color(237, 237, 237));
        Container_Title.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(115, 155, 194), 5, true));
        Container_Title.setMaximumSize(new java.awt.Dimension(660, 394));
        Container_Title.setLayout(new java.awt.GridBagLayout());

        jLabel_Title.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        jLabel_Title.setText("Genome Lunch Box");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 50);
        Container_Title.add(jLabel_Title, gridBagConstraints);

        jLabel1_Subtitle.setText("HMM Pipeline Manager for Pangenome Data Analysis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 18, 0);
        Container_Title.add(jLabel1_Subtitle, gridBagConstraints);

        jLabel_Name1.setText("Shalabh Thakur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        Container_Title.add(jLabel_Name1, gridBagConstraints);

        jLabel_Name2.setText("Anu Surendra");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 43;
        gridBagConstraints.gridheight = 5;
        Container_Title.add(jLabel_Name2, gridBagConstraints);

        jLabel_Name3.setText("Jamie Waese");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 48;
        Container_Title.add(jLabel_Name3, gridBagConstraints);

        jLabel_GuttmanLab.setText("David Guttman Lab");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 49;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 0);
        Container_Title.add(jLabel_GuttmanLab, gridBagConstraints);

        jLabel_CSBDept.setText("Cell & Systems Biology");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 50;
        Container_Title.add(jLabel_CSBDept, gridBagConstraints);

        jLabel_UniversityOfToronto.setText("University of Toronto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 51;
        Container_Title.add(jLabel_UniversityOfToronto, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/icon.png"))); // NOI18N
        jLabel1.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        Container_Title.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipady = 50;
        Home.add(Container_Title, gridBagConstraints);

        jTabbedPane1.addTab("Home", Home);

        ConnectToDB.setBackground(new java.awt.Color(153, 204, 255));
        ConnectToDB.setMaximumSize(new java.awt.Dimension(1200, 700));
        ConnectToDB.setMinimumSize(new java.awt.Dimension(1200, 700));
        ConnectToDB.setPreferredSize(new java.awt.Dimension(1200, 700));
        ConnectToDB.setLayout(new java.awt.GridBagLayout());

        Container_SelectDB.setBackground(new java.awt.Color(237, 237, 237));
        Container_SelectDB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(115, 155, 194), 5, true));
        Container_SelectDB.setAlignmentX(0.0F);
        Container_SelectDB.setAlignmentY(0.0F);
        Container_SelectDB.setLayout(new java.awt.GridBagLayout());

        jLabel_ConnectionName.setText("Connection Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 33;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(jLabel_ConnectionName, gridBagConstraints);
        jLabel_ConnectionName.getAccessibleContext().setAccessibleName("Name of Database Connection");

        portnumber.setText("3306");
        portnumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portnumberActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.insets = new java.awt.Insets(0, 37, 0, 12);
        Container_SelectDB.add(portnumber, gridBagConstraints);

        jLabel_UserName.setText("User Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 31;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(jLabel_UserName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 85;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(UserName, gridBagConstraints);

        jLabel_Password.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(jLabel_Password, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 85;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(Password, gridBagConstraints);

        jButton_TestConnection.setText("Test Connection");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(jButton_TestConnection, gridBagConstraints);

        jLabel_ConnectionStatus.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel_ConnectionStatus.setText("Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
        Container_SelectDB.add(jLabel_ConnectionStatus, gridBagConstraints);

        jButton_ConnectToDB.setText("Connect");
        jButton_ConnectToDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ConnectToDBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(jButton_ConnectToDB, gridBagConstraints);

        jLabel_ConnectToDBStatus.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel_ConnectToDBStatus.setText("Not Connected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        Container_SelectDB.add(jLabel_ConnectToDBStatus, gridBagConstraints);

        jLabel_RecentDBs.setText("Recent DB's");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 54;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 6);
        Container_SelectDB.add(jLabel_RecentDBs, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        Container_SelectDB.add(jComboBox_RecentDBList, gridBagConstraints);

        jButton_ClearRecentDBList.setText("Clear");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        Container_SelectDB.add(jButton_ClearRecentDBList, gridBagConstraints);

        jLabel_Database.setText("Default Schema");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(jLabel_Database, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 85;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(DBName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(DBConnection, gridBagConstraints);

        jLabel_port.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        Container_SelectDB.add(jLabel_port, gridBagConstraints);

        IPAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPAddressActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 85;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(IPAddress, gridBagConstraints);

        jLabel_IPAddress2.setText("IP Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 33;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 6, 0);
        Container_SelectDB.add(jLabel_IPAddress2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
        ConnectToDB.add(Container_SelectDB, gridBagConstraints);

        jLabel_ConnectToDB.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel_ConnectToDB.setText("Connect to Database");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 10, 0);
        ConnectToDB.add(jLabel_ConnectToDB, gridBagConstraints);

        jTabbedPane1.addTab("Connect to DB", ConnectToDB);

        PipelineConfigScrollPanel.setBackground(new java.awt.Color(153, 204, 255));
        PipelineConfigScrollPanel.setBorder(null);
        PipelineConfigScrollPanel.setHorizontalScrollBar(null);
        PipelineConfigScrollPanel.setMaximumSize(new java.awt.Dimension(1200, 700));
        PipelineConfigScrollPanel.setMinimumSize(new java.awt.Dimension(1200, 700));

        PipelineConfig.setBackground(new java.awt.Color(153, 204, 255));
        PipelineConfig.setMaximumSize(new java.awt.Dimension(1200, 1800));
        PipelineConfig.setMinimumSize(new java.awt.Dimension(1200, 1800));
        PipelineConfig.setPreferredSize(new java.awt.Dimension(1200, 1767));
        PipelineConfig.setVerifyInputWhenFocusTarget(false);
        PipelineConfig.setLayout(new java.awt.GridBagLayout());

        Container_Analysis.setBackground(new java.awt.Color(237, 236, 236));
        Container_Analysis.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis"));
        Container_Analysis.setToolTipText("Analysis to perform in the pipeline.");
        Container_Analysis.setLayout(new java.awt.GridBagLayout());

        jLabel16.setText("Homolog Scan");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 25, 17, 10);
        Container_Analysis.add(jLabel16, gridBagConstraints);

        HomologScan_buttonGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Yes");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        Container_Analysis.add(jRadioButton1, gridBagConstraints);

        HomologScan_buttonGroup.add(jRadioButton2);
        jRadioButton2.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 25);
        Container_Analysis.add(jRadioButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_Analysis, gridBagConstraints);

        Container_Sequence.setBackground(new java.awt.Color(237, 236, 236));
        Container_Sequence.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence"));
        Container_Sequence.setToolTipText("Analysis to perform in the pipeline.");
        Container_Sequence.setLayout(new java.awt.GridBagLayout());

        jLabel25.setText("Format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 25, 15, 7);
        Container_Sequence.add(jLabel25, gridBagConstraints);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FASTA" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        Container_Sequence.add(jComboBox3, gridBagConstraints);

        jLabel26.setText("Adjust Header");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        Container_Sequence.add(jLabel26, gridBagConstraints);

        AdjustHeader_buttonGroup.add(jRadioButton3);
        jRadioButton3.setText("Yes");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        Container_Sequence.add(jRadioButton3, gridBagConstraints);

        AdjustHeader_buttonGroup.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 25);
        Container_Sequence.add(jRadioButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_Sequence, gridBagConstraints);

        Container_SequenceDirectory.setBackground(new java.awt.Color(237, 236, 236));
        Container_SequenceDirectory.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence Directory"));
        Container_SequenceDirectory.setToolTipText("Analysis to perform in the pipeline.");
        Container_SequenceDirectory.setLayout(new java.awt.GridBagLayout());

        jLabel27.setText("Reference Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 25, 0, 66);
        Container_SequenceDirectory.add(jLabel27, gridBagConstraints);

        QueryDirectoryFileLoader.setText("Select");
        QueryDirectoryFileLoader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryDirectoryFileLoaderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 10, 25);
        Container_SequenceDirectory.add(QueryDirectoryFileLoader, gridBagConstraints);

        jLabel28.setText("Query Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 15, 66);
        Container_SequenceDirectory.add(jLabel28, gridBagConstraints);

        ReferenceDirectoryFolderPathTextBox.setToolTipText("Location to query genome directory.");
        ReferenceDirectoryFolderPathTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReferenceDirectoryFolderPathTextBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        Container_SequenceDirectory.add(ReferenceDirectoryFolderPathTextBox, gridBagConstraints);

        ReferenceDirectoryFolderLoader.setText("Select");
        ReferenceDirectoryFolderLoader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReferenceDirectoryFolderLoaderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 25);
        Container_SequenceDirectory.add(ReferenceDirectoryFolderLoader, gridBagConstraints);

        QueryDirectoryFolderPathTextBox.setToolTipText("Location to reference genome directory.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 10, 0);
        Container_SequenceDirectory.add(QueryDirectoryFolderPathTextBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_SequenceDirectory, gridBagConstraints);

        Container_Group.setBackground(new java.awt.Color(237, 236, 236));
        Container_Group.setBorder(javax.swing.BorderFactory.createTitledBorder("Group"));
        Container_Group.setToolTipText("Analysis to perform in the pipeline.");
        Container_Group.setLayout(new java.awt.GridBagLayout());

        jLabel29.setText("Group File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 35, 0, 10);
        Container_Group.add(jLabel29, gridBagConstraints);

        GroupFilePathTextBox.setToolTipText("Location to reference genome directory.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_Group.add(GroupFilePathTextBox, gridBagConstraints);

        jLabel30.setText("Group Distance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 35, 0, 10);
        Container_Group.add(jLabel30, gridBagConstraints);

        GroupDistancePathTextBox.setToolTipText("Location to query genome directory.");
        GroupDistancePathTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupDistancePathTextBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_Group.add(GroupDistancePathTextBox, gridBagConstraints);

        jLabel31.setText("Input Group");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 35, 0, 10);
        Container_Group.add(jLabel31, gridBagConstraints);

        InputGroup_buttonGroup.add(jRadioButton5);
        jRadioButton5.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(15, 63, 0, 0);
        Container_Group.add(jRadioButton5, gridBagConstraints);

        InputGroup_buttonGroup.add(jRadioButton6);
        jRadioButton6.setSelected(true);
        jRadioButton6.setText("Yes");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        Container_Group.add(jRadioButton6, gridBagConstraints);

        jLabel32.setText("Group Alignment Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 35, 0, 10);
        Container_Group.add(jLabel32, gridBagConstraints);

        GroupAlignmentDirectoryPathTextBox.setToolTipText("Location to reference genome directory.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_Group.add(GroupAlignmentDirectoryPathTextBox, gridBagConstraints);

        jLabel33.setText("Group Model Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 35, 0, 10);
        Container_Group.add(jLabel33, gridBagConstraints);

        GroupModelDirectoryPathTextBox.setToolTipText("Location to query genome directory.");
        GroupModelDirectoryPathTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupModelDirectoryPathTextBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_Group.add(GroupModelDirectoryPathTextBox, gridBagConstraints);

        jLabel34.setText("Group Singleton Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 35, 15, 10);
        Container_Group.add(jLabel34, gridBagConstraints);

        GroupSingletonDirectoryPathTextBox.setToolTipText("Location to query genome directory.");
        GroupSingletonDirectoryPathTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupSingletonDirectoryPathTextBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 15, 0);
        Container_Group.add(GroupSingletonDirectoryPathTextBox, gridBagConstraints);

        GroupDistanceFileSelector.setText("Select");
        GroupDistanceFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupDistanceFileSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 25);
        Container_Group.add(GroupDistanceFileSelector, gridBagConstraints);

        GroupAlignmentDirectoryFileSelector.setText("Select");
        GroupAlignmentDirectoryFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupAlignmentDirectoryFileSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 25);
        Container_Group.add(GroupAlignmentDirectoryFileSelector, gridBagConstraints);

        GroupModelDirectoryFileSelector.setText("Select");
        GroupModelDirectoryFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupModelDirectoryFileSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 25);
        Container_Group.add(GroupModelDirectoryFileSelector, gridBagConstraints);

        GroupSingletonDirectoryFileSelector.setText("Select");
        GroupSingletonDirectoryFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupSingletonDirectoryFileSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 15, 25);
        Container_Group.add(GroupSingletonDirectoryFileSelector, gridBagConstraints);

        GroupFileFileSelector.setText("Select");
        GroupFileFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupFileFileSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 25);
        Container_Group.add(GroupFileFileSelector, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_Group, gridBagConstraints);

        Container_Database.setBackground(new java.awt.Color(237, 236, 236));
        Container_Database.setBorder(javax.swing.BorderFactory.createTitledBorder("Database"));
        Container_Database.setToolTipText("Analysis to perform in the pipeline.");
        Container_Database.setLayout(new java.awt.GridBagLayout());

        jLabel35.setText("HMM Database");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 25, 0, 68);
        Container_Database.add(jLabel35, gridBagConstraints);

        HMMDatabasePathTextBox.setToolTipText("Location to reference genome directory.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.8;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        Container_Database.add(HMMDatabasePathTextBox, gridBagConstraints);

        HMMDatabaseFileSelector.setText("Select");
        HMMDatabaseFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HMMDatabaseFileSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 25);
        Container_Database.add(HMMDatabaseFileSelector, gridBagConstraints);

        jLabel36.setText("Sequence Database");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 15, 68);
        Container_Database.add(jLabel36, gridBagConstraints);

        SequenceDatabasePathTextBox.setToolTipText("Location to query genome directory.");
        SequenceDatabasePathTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SequenceDatabasePathTextBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 15, 0);
        Container_Database.add(SequenceDatabasePathTextBox, gridBagConstraints);

        SequenceDatabaseFileSelector.setText("Select");
        SequenceDatabaseFileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SequenceDatabaseFileSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 15, 25);
        Container_Database.add(SequenceDatabaseFileSelector, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_Database, gridBagConstraints);

        Container_CoreGenome.setBackground(new java.awt.Color(237, 236, 236));
        Container_CoreGenome.setBorder(javax.swing.BorderFactory.createTitledBorder("Core Genome"));
        Container_CoreGenome.setToolTipText("Analysis to perform in the pipeline.");
        Container_CoreGenome.setLayout(new java.awt.GridBagLayout());

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel38.setText("Accuracy Threshold");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 21, 15, 54);
        Container_CoreGenome.add(jLabel38, gridBagConstraints);

        CoreGenomeAccuracyThresholdSlider.setMajorTickSpacing(99);
        CoreGenomeAccuracyThresholdSlider.setMinimum(1);
        CoreGenomeAccuracyThresholdSlider.setMinorTickSpacing(25);
        CoreGenomeAccuracyThresholdSlider.setPaintTicks(true);
        CoreGenomeAccuracyThresholdSlider.setToolTipText("Minimum accuracy threshold for sequence alignment. Default is 90.");
        CoreGenomeAccuracyThresholdSlider.setValue(90);
        CoreGenomeAccuracyThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CoreGenomeAccuracyThresholdSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(0, 17, 0, 0);
        Container_CoreGenome.add(CoreGenomeAccuracyThresholdSlider, gridBagConstraints);

        CoreGenomeAccuracyThresholdTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        CoreGenomeAccuracyThresholdTextBox.setText("90");
        CoreGenomeAccuracyThresholdTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoreGenomeAccuracyThresholdTextBoxActionPerformed(evt);
            }
        });
        CoreGenomeAccuracyThresholdTextBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                CoreGenomeAccuracyThresholdTextBoxInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        CoreGenomeAccuracyThresholdTextBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CoreGenomeAccuracyThresholdTextBoxPropertyChange(evt);
            }
        });
        CoreGenomeAccuracyThresholdTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CoreGenomeAccuracyThresholdTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 32;
        Container_CoreGenome.add(CoreGenomeAccuracyThresholdTextBox, gridBagConstraints);

        CoreGenomeAccuracyThresholdDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        CoreGenomeAccuracyThresholdDefault.setForeground(new java.awt.Color(102, 102, 102));
        CoreGenomeAccuracyThresholdDefault.setText("default");
        CoreGenomeAccuracyThresholdDefault.setToolTipText("Restore default setting.");
        CoreGenomeAccuracyThresholdDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CoreGenomeAccuracyThresholdDefault.setIconTextGap(0);
        CoreGenomeAccuracyThresholdDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        CoreGenomeAccuracyThresholdDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        CoreGenomeAccuracyThresholdDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        CoreGenomeAccuracyThresholdDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        CoreGenomeAccuracyThresholdDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CoreGenomeAccuracyThresholdDefaultMouseClicked(evt);
            }
        });
        CoreGenomeAccuracyThresholdDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoreGenomeAccuracyThresholdDefaultActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 25);
        Container_CoreGenome.add(CoreGenomeAccuracyThresholdDefault, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_CoreGenome, gridBagConstraints);

        Container_HMMERParameters.setBackground(new java.awt.Color(237, 236, 236));
        Container_HMMERParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("HMMER Parameters"));
        Container_HMMERParameters.setToolTipText("Analysis to perform in the pipeline.");
        Container_HMMERParameters.setLayout(new java.awt.GridBagLayout());

        jLabel41.setText("Sequence E Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(12, 25, 0, 13);
        Container_HMMERParameters.add(jLabel41, gridBagConstraints);

        SequenceEValueTextBox.setText("0.00001");
        SequenceEValueTextBox.setToolTipText("E value threshold for complete sequence. ");
        SequenceEValueTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SequenceEValueTextBoxTextBoxActionPerformed(evt);
            }
        });
        SequenceEValueTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SequenceEValueTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 3);
        Container_HMMERParameters.add(SequenceEValueTextBox, gridBagConstraints);

        jLabel42.setText("Domain E Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 13);
        Container_HMMERParameters.add(jLabel42, gridBagConstraints);

        DomainEValueTextBox.setText("0.00001");
        DomainEValueTextBox.setToolTipText("E value threshold for domain.");
        DomainEValueTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DomainEValueTextBoxTextBoxActionPerformed(evt);
            }
        });
        DomainEValueTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DomainEValueTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 3);
        Container_HMMERParameters.add(DomainEValueTextBox, gridBagConstraints);

        jLabel43.setText("Include Sequence E Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 13);
        Container_HMMERParameters.add(jLabel43, gridBagConstraints);

        IncludeSequenceEValueTextBox.setText("0.00001");
        IncludeSequenceEValueTextBox.setToolTipText("E value threshold to include sequence in results.");
        IncludeSequenceEValueTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncludeSequenceEValueTextBoxTextBoxActionPerformed(evt);
            }
        });
        IncludeSequenceEValueTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IncludeSequenceEValueTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 3);
        Container_HMMERParameters.add(IncludeSequenceEValueTextBox, gridBagConstraints);

        IncludeDomainEvalueTextBox.setText("0.00001");
        IncludeDomainEvalueTextBox.setToolTipText("E value threshold to include domain in results.");
        IncludeDomainEvalueTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IncludeDomainEvalueTextBoxMouseClicked(evt);
            }
        });
        IncludeDomainEvalueTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncludeDomainEvalueTextBoxTextBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 15, 3);
        Container_HMMERParameters.add(IncludeDomainEvalueTextBox, gridBagConstraints);

        jLabel44.setText("Include Domain E Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 15, 13);
        Container_HMMERParameters.add(jLabel44, gridBagConstraints);

        SequenceEValueDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        SequenceEValueDefault.setForeground(new java.awt.Color(102, 102, 102));
        SequenceEValueDefault.setText("default");
        SequenceEValueDefault.setToolTipText("Restore default setting.");
        SequenceEValueDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SequenceEValueDefault.setIconTextGap(0);
        SequenceEValueDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        SequenceEValueDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        SequenceEValueDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        SequenceEValueDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        SequenceEValueDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SequenceEValueDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 19, 0, 25);
        Container_HMMERParameters.add(SequenceEValueDefault, gridBagConstraints);

        DomainEValueDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        DomainEValueDefault.setForeground(new java.awt.Color(102, 102, 102));
        DomainEValueDefault.setText("default");
        DomainEValueDefault.setToolTipText("Restore default setting.");
        DomainEValueDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        DomainEValueDefault.setIconTextGap(0);
        DomainEValueDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        DomainEValueDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        DomainEValueDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        DomainEValueDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        DomainEValueDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DomainEValueDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 19, 0, 25);
        Container_HMMERParameters.add(DomainEValueDefault, gridBagConstraints);

        IncludeSequenceEvalueDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        IncludeSequenceEvalueDefault.setForeground(new java.awt.Color(102, 102, 102));
        IncludeSequenceEvalueDefault.setText("default");
        IncludeSequenceEvalueDefault.setToolTipText("Restore default setting.");
        IncludeSequenceEvalueDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IncludeSequenceEvalueDefault.setIconTextGap(0);
        IncludeSequenceEvalueDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        IncludeSequenceEvalueDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        IncludeSequenceEvalueDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        IncludeSequenceEvalueDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        IncludeSequenceEvalueDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IncludeSequenceEvalueDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 19, 0, 25);
        Container_HMMERParameters.add(IncludeSequenceEvalueDefault, gridBagConstraints);

        IncludeDomainDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        IncludeDomainDefault.setForeground(new java.awt.Color(102, 102, 102));
        IncludeDomainDefault.setText("default");
        IncludeDomainDefault.setToolTipText("Restore default setting.");
        IncludeDomainDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IncludeDomainDefault.setIconTextGap(0);
        IncludeDomainDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        IncludeDomainDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        IncludeDomainDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        IncludeDomainDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        IncludeDomainDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IncludeDomainDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 19, 14, 25);
        Container_HMMERParameters.add(IncludeDomainDefault, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_HMMERParameters, gridBagConstraints);

        Container_Reference.setBackground(new java.awt.Color(237, 236, 236));
        Container_Reference.setBorder(javax.swing.BorderFactory.createTitledBorder("Reference"));
        Container_Reference.setToolTipText("Analysis to perform in the pipeline.");
        Container_Reference.setLayout(new java.awt.GridBagLayout());

        jLabel40.setText("Number of Reference Genomes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(15, 25, 15, 15);
        Container_Reference.add(jLabel40, gridBagConstraints);

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        jComboBox9.setToolTipText("Number of genomes to be used as reference.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 25);
        Container_Reference.add(jComboBox9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_Reference, gridBagConstraints);

        Container_ResultParsingParameters.setBackground(new java.awt.Color(237, 236, 236));
        Container_ResultParsingParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Result Parsing Parameters"));
        Container_ResultParsingParameters.setToolTipText("Analysis to perform in the pipeline.");
        Container_ResultParsingParameters.setLayout(new java.awt.GridBagLayout());

        jLabel52.setText("Number Domain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel52, gridBagConstraints);

        jLabel53.setText("Accuracy Threshold");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel53, gridBagConstraints);

        jLabel54.setText("Sequence Identity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel54, gridBagConstraints);

        NumberDomainComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        NumberDomainComboBox.setToolTipText("Maximum number of domains allowed in a hit sequence.");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, NumberDomainSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), NumberDomainComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"), "");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 0);
        Container_ResultParsingParameters.add(NumberDomainComboBox, gridBagConstraints);

        jLabel55.setText("Query Coverage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel55, gridBagConstraints);

        AccuracyThresholdSlider.setMajorTickSpacing(99);
        AccuracyThresholdSlider.setMinimum(1);
        AccuracyThresholdSlider.setMinorTickSpacing(25);
        AccuracyThresholdSlider.setPaintTicks(true);
        AccuracyThresholdSlider.setToolTipText("Minimum accuracy threshold for sequence alignment. Default is 0.85.");
        AccuracyThresholdSlider.setValue(85);
        AccuracyThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AccuracyThresholdSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(AccuracyThresholdSlider, gridBagConstraints);

        SequenceIdentitySlider.setMajorTickSpacing(99);
        SequenceIdentitySlider.setMinimum(1);
        SequenceIdentitySlider.setMinorTickSpacing(25);
        SequenceIdentitySlider.setPaintTicks(true);
        SequenceIdentitySlider.setToolTipText("Minimum sequence identity threshold. Default is 70.");
        SequenceIdentitySlider.setValue(70);
        SequenceIdentitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SequenceIdentitySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(SequenceIdentitySlider, gridBagConstraints);

        SequenceSimilaritySlider.setMajorTickSpacing(99);
        SequenceSimilaritySlider.setMinimum(1);
        SequenceSimilaritySlider.setMinorTickSpacing(25);
        SequenceSimilaritySlider.setPaintTicks(true);
        SequenceSimilaritySlider.setToolTipText("Minimum sequence similarity threshold. Default is 60.");
        SequenceSimilaritySlider.setValue(60);
        SequenceSimilaritySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SequenceSimilaritySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(SequenceSimilaritySlider, gridBagConstraints);

        QueryCoverageSlider.setMajorTickSpacing(99);
        QueryCoverageSlider.setMinimum(1);
        QueryCoverageSlider.setMinorTickSpacing(25);
        QueryCoverageSlider.setPaintTicks(true);
        QueryCoverageSlider.setToolTipText("Minimum query coverage threshold. Default is 70.");
        QueryCoverageSlider.setValue(70);
        QueryCoverageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                QueryCoverageSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(QueryCoverageSlider, gridBagConstraints);

        TargetCoverageSlider.setMajorTickSpacing(99);
        TargetCoverageSlider.setMinimum(1);
        TargetCoverageSlider.setMinorTickSpacing(25);
        TargetCoverageSlider.setPaintTicks(true);
        TargetCoverageSlider.setToolTipText("Minimum target coverage threshold. Default is 70.");
        TargetCoverageSlider.setValue(70);
        TargetCoverageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TargetCoverageSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(TargetCoverageSlider, gridBagConstraints);

        MinimumPartialCoverageSlider.setMajorTickSpacing(99);
        MinimumPartialCoverageSlider.setMinimum(1);
        MinimumPartialCoverageSlider.setMinorTickSpacing(25);
        MinimumPartialCoverageSlider.setPaintTicks(true);
        MinimumPartialCoverageSlider.setToolTipText("Minimum threshold for partial homolog prediction. Default is 5.");
        MinimumPartialCoverageSlider.setValue(5);
        MinimumPartialCoverageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MinimumPartialCoverageSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(MinimumPartialCoverageSlider, gridBagConstraints);

        NumberDomainSlider.setMajorTickSpacing(99);
        NumberDomainSlider.setMaximum(5);
        NumberDomainSlider.setMinimum(1);
        NumberDomainSlider.setMinorTickSpacing(1);
        NumberDomainSlider.setPaintTicks(true);
        NumberDomainSlider.setToolTipText("Minimum identity for chimera prediction. Default is 1.");
        NumberDomainSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                NumberDomainSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(25, 11, 0, 11);
        Container_ResultParsingParameters.add(NumberDomainSlider, gridBagConstraints);

        ChimeraAccuracySlider.setMajorTickSpacing(99);
        ChimeraAccuracySlider.setMinimum(1);
        ChimeraAccuracySlider.setMinorTickSpacing(25);
        ChimeraAccuracySlider.setPaintTicks(true);
        ChimeraAccuracySlider.setToolTipText("Minumum accuracy threshold for chimera prediction. Default is 0.85.");
        ChimeraAccuracySlider.setValue(85);
        ChimeraAccuracySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ChimeraAccuracySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 25, 11);
        Container_ResultParsingParameters.add(ChimeraAccuracySlider, gridBagConstraints);

        jLabel56.setText("Sequence Similarity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel56, gridBagConstraints);

        jLabel57.setText("Target Coverage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel57, gridBagConstraints);

        jLabel58.setText("Minimum Partial Coverage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel58, gridBagConstraints);

        jLabel59.setText("Chimera Accuracy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 25, 15);
        Container_ResultParsingParameters.add(jLabel59, gridBagConstraints);

        jLabel60.setText("Chimera Similarity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel60, gridBagConstraints);

        AccuracyThresholdTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        AccuracyThresholdTextBox.setText("0.85");
        AccuracyThresholdTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccuracyThresholdTextBoxActionPerformed(evt);
            }
        });
        AccuracyThresholdTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AccuracyThresholdTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(AccuracyThresholdTextBox, gridBagConstraints);

        SequenceIdentityTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        SequenceIdentityTextBox.setText("70");
        SequenceIdentityTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SequenceIdentityTextBoxActionPerformed(evt);
            }
        });
        SequenceIdentityTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SequenceIdentityTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(SequenceIdentityTextBox, gridBagConstraints);

        SequenceSimilarityTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        SequenceSimilarityTextBox.setText("60");
        SequenceSimilarityTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SequenceSimilarityTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(SequenceSimilarityTextBox, gridBagConstraints);

        QueryCoverageTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        QueryCoverageTextBox.setText("70");
        QueryCoverageTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                QueryCoverageTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(QueryCoverageTextBox, gridBagConstraints);

        ChimeraAccuracyTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ChimeraAccuracyTextBox.setText("0.85");
        ChimeraAccuracyTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ChimeraAccuracyTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 25, 0);
        Container_ResultParsingParameters.add(ChimeraAccuracyTextBox, gridBagConstraints);

        TargetCoverageTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TargetCoverageTextBox.setText("70");
        TargetCoverageTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TargetCoverageTextBoxActionPerformed(evt);
            }
        });
        TargetCoverageTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TargetCoverageTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(TargetCoverageTextBox, gridBagConstraints);

        MinimumPartialCoverageTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        MinimumPartialCoverageTextBox.setText("5");
        MinimumPartialCoverageTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MinimumPartialCoverageTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(MinimumPartialCoverageTextBox, gridBagConstraints);

        ChimeraSimilarityTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ChimeraSimilarityTextBox.setText("50");
        ChimeraSimilarityTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChimeraSimilarityTextBoxActionPerformed(evt);
            }
        });
        ChimeraSimilarityTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ChimeraSimilarityTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(ChimeraSimilarityTextBox, gridBagConstraints);

        jLabel61.setText("Chimera Identity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 25, 0, 15);
        Container_ResultParsingParameters.add(jLabel61, gridBagConstraints);

        ChimeraIdentityTextBox.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ChimeraIdentityTextBox.setText("50");
        ChimeraIdentityTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ChimeraIdentityTextBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        Container_ResultParsingParameters.add(ChimeraIdentityTextBox, gridBagConstraints);

        ChimeraIdentitySlider.setMajorTickSpacing(99);
        ChimeraIdentitySlider.setMinimum(1);
        ChimeraIdentitySlider.setMinorTickSpacing(25);
        ChimeraIdentitySlider.setPaintTicks(true);
        ChimeraIdentitySlider.setToolTipText("Minimum identity for chimera prediction. Default is 50.");
        ChimeraIdentitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ChimeraIdentitySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(ChimeraIdentitySlider, gridBagConstraints);

        ChimeraSimilaritySlider.setMajorTickSpacing(99);
        ChimeraSimilaritySlider.setMinimum(1);
        ChimeraSimilaritySlider.setMinorTickSpacing(25);
        ChimeraSimilaritySlider.setPaintTicks(true);
        ChimeraSimilaritySlider.setToolTipText("Minimum similarity for chimera prediction. Default is 50.");
        ChimeraSimilaritySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ChimeraSimilaritySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 0, 11);
        Container_ResultParsingParameters.add(ChimeraSimilaritySlider, gridBagConstraints);

        NumberDomainDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        NumberDomainDefault.setForeground(new java.awt.Color(102, 102, 102));
        NumberDomainDefault.setText("default");
        NumberDomainDefault.setToolTipText("Restore default setting.");
        NumberDomainDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NumberDomainDefault.setIconTextGap(0);
        NumberDomainDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        NumberDomainDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        NumberDomainDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        NumberDomainDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        NumberDomainDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NumberDomainDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 0, 25);
        Container_ResultParsingParameters.add(NumberDomainDefault, gridBagConstraints);

        AccuracyThresholdDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        AccuracyThresholdDefault.setForeground(new java.awt.Color(102, 102, 102));
        AccuracyThresholdDefault.setText("default");
        AccuracyThresholdDefault.setToolTipText("Restore default setting.");
        AccuracyThresholdDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AccuracyThresholdDefault.setIconTextGap(0);
        AccuracyThresholdDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        AccuracyThresholdDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        AccuracyThresholdDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        AccuracyThresholdDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        AccuracyThresholdDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AccuracyThresholdDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(AccuracyThresholdDefault, gridBagConstraints);

        SequenceIdentityDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        SequenceIdentityDefault.setForeground(new java.awt.Color(102, 102, 102));
        SequenceIdentityDefault.setText("default");
        SequenceIdentityDefault.setToolTipText("Restore default setting.");
        SequenceIdentityDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SequenceIdentityDefault.setIconTextGap(0);
        SequenceIdentityDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        SequenceIdentityDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        SequenceIdentityDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        SequenceIdentityDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        SequenceIdentityDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SequenceIdentityDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(SequenceIdentityDefault, gridBagConstraints);

        SequenceSimilarityDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        SequenceSimilarityDefault.setForeground(new java.awt.Color(102, 102, 102));
        SequenceSimilarityDefault.setText("default");
        SequenceSimilarityDefault.setToolTipText("Restore default setting.");
        SequenceSimilarityDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SequenceSimilarityDefault.setIconTextGap(0);
        SequenceSimilarityDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        SequenceSimilarityDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        SequenceSimilarityDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        SequenceSimilarityDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        SequenceSimilarityDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SequenceSimilarityDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(SequenceSimilarityDefault, gridBagConstraints);

        QueryCoverageDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        QueryCoverageDefault.setForeground(new java.awt.Color(102, 102, 102));
        QueryCoverageDefault.setText("default");
        QueryCoverageDefault.setToolTipText("Restore default setting.");
        QueryCoverageDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        QueryCoverageDefault.setIconTextGap(0);
        QueryCoverageDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        QueryCoverageDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        QueryCoverageDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        QueryCoverageDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        QueryCoverageDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QueryCoverageDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(QueryCoverageDefault, gridBagConstraints);

        TargetCoverageDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        TargetCoverageDefault.setForeground(new java.awt.Color(102, 102, 102));
        TargetCoverageDefault.setText("default");
        TargetCoverageDefault.setToolTipText("Restore default setting.");
        TargetCoverageDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TargetCoverageDefault.setIconTextGap(0);
        TargetCoverageDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        TargetCoverageDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        TargetCoverageDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        TargetCoverageDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        TargetCoverageDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TargetCoverageDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(TargetCoverageDefault, gridBagConstraints);

        ChimeraIdentityDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        ChimeraIdentityDefault.setForeground(new java.awt.Color(102, 102, 102));
        ChimeraIdentityDefault.setText("default");
        ChimeraIdentityDefault.setToolTipText("Restore default setting.");
        ChimeraIdentityDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChimeraIdentityDefault.setIconTextGap(0);
        ChimeraIdentityDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        ChimeraIdentityDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        ChimeraIdentityDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        ChimeraIdentityDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        ChimeraIdentityDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChimeraIdentityDefaultMouseClicked(evt);
            }
        });
        ChimeraIdentityDefault.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ChimeraIdentityDefaultKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(ChimeraIdentityDefault, gridBagConstraints);

        ChimaraSimilarityDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        ChimaraSimilarityDefault.setForeground(new java.awt.Color(102, 102, 102));
        ChimaraSimilarityDefault.setText("default");
        ChimaraSimilarityDefault.setToolTipText("Restore default setting.");
        ChimaraSimilarityDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChimaraSimilarityDefault.setIconTextGap(0);
        ChimaraSimilarityDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        ChimaraSimilarityDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        ChimaraSimilarityDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        ChimaraSimilarityDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        ChimaraSimilarityDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChimaraSimilarityDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(ChimaraSimilarityDefault, gridBagConstraints);

        ChimeraAccuaracyDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        ChimeraAccuaracyDefault.setForeground(new java.awt.Color(102, 102, 102));
        ChimeraAccuaracyDefault.setText("default");
        ChimeraAccuaracyDefault.setToolTipText("Restore default setting.");
        ChimeraAccuaracyDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChimeraAccuaracyDefault.setIconTextGap(0);
        ChimeraAccuaracyDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        ChimeraAccuaracyDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        ChimeraAccuaracyDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        ChimeraAccuaracyDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        ChimeraAccuaracyDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChimeraAccuaracyDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 25, 25);
        Container_ResultParsingParameters.add(ChimeraAccuaracyDefault, gridBagConstraints);

        MinimumPartialCoverageDefault.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        MinimumPartialCoverageDefault.setForeground(new java.awt.Color(102, 102, 102));
        MinimumPartialCoverageDefault.setText("default");
        MinimumPartialCoverageDefault.setToolTipText("Restore default setting.");
        MinimumPartialCoverageDefault.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MinimumPartialCoverageDefault.setIconTextGap(0);
        MinimumPartialCoverageDefault.setMargin(new java.awt.Insets(2, 2, 0, 2));
        MinimumPartialCoverageDefault.setMaximumSize(new java.awt.Dimension(18, 18));
        MinimumPartialCoverageDefault.setMinimumSize(new java.awt.Dimension(18, 18));
        MinimumPartialCoverageDefault.setPreferredSize(new java.awt.Dimension(15, 15));
        MinimumPartialCoverageDefault.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinimumPartialCoverageDefaultMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 25);
        Container_ResultParsingParameters.add(MinimumPartialCoverageDefault, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 10, 300);
        PipelineConfig.add(Container_ResultParsingParameters, gridBagConstraints);

        jLabel_PipelineConfig.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel_PipelineConfig.setText("Pipeline Configuration Panel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 16, 0);
        PipelineConfig.add(jLabel_PipelineConfig, gridBagConstraints);

        Container_SaveLoadRun.setBackground(new java.awt.Color(237, 236, 236));
        Container_SaveLoadRun.setBorder(javax.swing.BorderFactory.createTitledBorder("Action"));
        Container_SaveLoadRun.setToolTipText("Analysis to perform in the pipeline.");
        Container_SaveLoadRun.setLayout(new java.awt.GridBagLayout());

        jButton_SaveSettings.setText("Save Settings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 25, 15, 0);
        Container_SaveLoadRun.add(jButton_SaveSettings, gridBagConstraints);

        jButton_LoadSettings.setText("Load Settings");
        jButton_LoadSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoadSettingsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        Container_SaveLoadRun.add(jButton_LoadSettings, gridBagConstraints);

        jButton_DefaultSettings.setText("Default Settings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        Container_SaveLoadRun.add(jButton_DefaultSettings, gridBagConstraints);

        jButton_RunPipeline.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jButton_RunPipeline.setText("Run Pipeline");
        jButton_RunPipeline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RunPipelineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 21, 4, 25);
        Container_SaveLoadRun.add(jButton_RunPipeline, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 300, 22, 300);
        PipelineConfig.add(Container_SaveLoadRun, gridBagConstraints);

        jLabel6.setForeground(new java.awt.Color(103, 142, 180));
        jLabel6.setText("1.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel6, gridBagConstraints);

        jLabel7.setForeground(new java.awt.Color(103, 142, 180));
        jLabel7.setText("2.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel7, gridBagConstraints);

        jLabel8.setForeground(new java.awt.Color(103, 142, 180));
        jLabel8.setText("3.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel8, gridBagConstraints);

        jLabel9.setForeground(new java.awt.Color(103, 142, 180));
        jLabel9.setText("4.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel9, gridBagConstraints);

        jLabel10.setForeground(new java.awt.Color(103, 142, 180));
        jLabel10.setText("5.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel10, gridBagConstraints);

        jLabel11.setForeground(new java.awt.Color(103, 142, 180));
        jLabel11.setText("6.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel11, gridBagConstraints);

        jLabel12.setForeground(new java.awt.Color(103, 142, 180));
        jLabel12.setText("7.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel12, gridBagConstraints);

        jLabel13.setForeground(new java.awt.Color(103, 142, 180));
        jLabel13.setText("8.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel13, gridBagConstraints);

        jLabel14.setForeground(new java.awt.Color(103, 142, 180));
        jLabel14.setText("9.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel14, gridBagConstraints);

        jLabel15.setForeground(new java.awt.Color(103, 142, 180));
        jLabel15.setText("10.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 256, 0, 9);
        PipelineConfig.add(jLabel15, gridBagConstraints);

        PipelineConfigScrollPanel.setViewportView(PipelineConfig);

        jTabbedPane1.addTab("Pipeline Config", PipelineConfigScrollPanel);

        QueryBuilder.setBackground(new java.awt.Color(153, 204, 255));
        QueryBuilder.setLayout(new java.awt.GridBagLayout());

        jPanel_BuildQueryGroup.setBackground(new java.awt.Color(237, 236, 236));
        jPanel_BuildQueryGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Taxonomy"));
        jPanel_BuildQueryGroup.setLayout(new java.awt.GridBagLayout());

        jScrollPane_SearchFieldsScrollPanel.setViewportView(jTree_SearchFields);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.1;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel_BuildQueryGroup.add(jScrollPane_SearchFieldsScrollPanel, gridBagConstraints);

        jButton2.setText("Add to query group");
        jButton2.setToolTipText("Add selected items to the selected query group branch.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        jPanel_BuildQueryGroup.add(jButton2, gridBagConstraints);
        jPanel_BuildQueryGroup.add(canvas1, new java.awt.GridBagConstraints());

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel3.setText("Select items to build query groups.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        jPanel_BuildQueryGroup.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 50, 50, 20);
        QueryBuilder.add(jPanel_BuildQueryGroup, gridBagConstraints);

        jPanel_ManageQueryGroups.setBackground(new java.awt.Color(237, 236, 236));
        jPanel_ManageQueryGroups.setBorder(javax.swing.BorderFactory.createTitledBorder("Query Groups"));
        jPanel_ManageQueryGroups.setLayout(new java.awt.GridBagLayout());

        jButton_ClearGroup.setText("Clear Group");
        jButton_ClearGroup.setToolTipText("Remove branch node from Query Group tree.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        jPanel_ManageQueryGroups.add(jButton_ClearGroup, gridBagConstraints);

        jButton_EditGroup.setText("Clear Selected");
        jButton_EditGroup.setToolTipText("Remove selected items from Query Group manager.");
        jButton_EditGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EditGroupActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        jPanel_ManageQueryGroups.add(jButton_EditGroup, gridBagConstraints);

        jScrollPane1.setViewportView(jTree1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel_ManageQueryGroups.add(jScrollPane1, gridBagConstraints);

        jButton_EditGroup1.setText("Clear All");
        jButton_EditGroup1.setToolTipText("Remove all branches from Query Group tree.");
        jButton_EditGroup1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EditGroup1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 20);
        jPanel_ManageQueryGroups.add(jButton_EditGroup1, gridBagConstraints);

        jButton4.setText("Add New Group");
        jButton4.setToolTipText("Add new branch node to the Query Group manager.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        jPanel_ManageQueryGroups.add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 50, 50);
        QueryBuilder.add(jPanel_ManageQueryGroups, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel2.setText("Query Groups");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        QueryBuilder.add(jLabel2, gridBagConstraints);

        jTabbedPane1.addTab("Query Groups", QueryBuilder);

        Search.setBackground(new java.awt.Color(153, 204, 255));
        Search.setMaximumSize(new java.awt.Dimension(1024, 2400));
        Search.setMinimumSize(new java.awt.Dimension(600, 300));
        Search.setPreferredSize(new java.awt.Dimension(1024, 570));
        java.awt.GridBagLayout SearchLayout = new java.awt.GridBagLayout();
        SearchLayout.columnWidths = new int[] {0, 10, 0, 10, 0};
        SearchLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        Search.setLayout(SearchLayout);

        jLabel_Search.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel_Search.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        Search.add(jLabel_Search, gridBagConstraints);

        Container_BooleanSearch.setBackground(new java.awt.Color(237, 236, 236));
        Container_BooleanSearch.setBorder(javax.swing.BorderFactory.createTitledBorder("Boolean Search"));
        Container_BooleanSearch.setMaximumSize(new java.awt.Dimension(900, 700));
        Container_BooleanSearch.setMinimumSize(new java.awt.Dimension(300, 400));
        Container_BooleanSearch.setPreferredSize(new java.awt.Dimension(338, 227));
        Container_BooleanSearch.setLayout(new java.awt.GridBagLayout());

        jLabel_A.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel_A.setText("A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 15, 0);
        Container_BooleanSearch.add(jLabel_A, gridBagConstraints);

        jComboBox_BooleanOperator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AND", "OR", "A NOT B", "B NOT A", "!AND", "!OR" }));
        jComboBox_BooleanOperator.setSelectedItem("OR");
        jComboBox_BooleanOperator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_BooleanOperatorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 23, 8);
        Container_BooleanSearch.add(jComboBox_BooleanOperator, gridBagConstraints);

        jLabel_B.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel_B.setText("B");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 14, 0);
        Container_BooleanSearch.add(jLabel_B, gridBagConstraints);

        jTextArea_SearchBinA.setColumns(20);
        jTextArea_SearchBinA.setRows(5);
        jTextArea_SearchBinA.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(120, 120, 120), 1, true));
        jTextArea_SearchBinA.setMaximumSize(new java.awt.Dimension(250, 250));
        jTextArea_SearchBinA.setMinimumSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 2.2;
        gridBagConstraints.weighty = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 10);
        Container_BooleanSearch.add(jTextArea_SearchBinA, gridBagConstraints);

        jTextArea_SearchBinB.setColumns(20);
        jTextArea_SearchBinB.setRows(5);
        jTextArea_SearchBinB.setAutoscrolls(false);
        jTextArea_SearchBinB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(120, 120, 120), 1, true));
        jTextArea_SearchBinB.setMaximumSize(new java.awt.Dimension(250, 250));
        jTextArea_SearchBinB.setMinimumSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 2.2;
        gridBagConstraints.weighty = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 20);
        Container_BooleanSearch.add(jTextArea_SearchBinB, gridBagConstraints);

        jButton_ClearBinB.setText("Clear");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        Container_BooleanSearch.add(jButton_ClearBinB, gridBagConstraints);

        jButton_ClearBinA.setText("Clear");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        Container_BooleanSearch.add(jButton_ClearBinA, gridBagConstraints);

        jButton_BuildSQLquery.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jButton_BuildSQLquery.setText("Add to SQL Query");
        jButton_BuildSQLquery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_BuildSQLqueryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        Container_BooleanSearch.add(jButton_BuildSQLquery, gridBagConstraints);

        vennDiagram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/2Venn-A-or-B.png"))); // NOI18N
        vennDiagram.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                vennDiagramPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 0);
        Container_BooleanSearch.add(vennDiagram, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel4.setText("Place query groups in bins");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        Container_BooleanSearch.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel5.setText("and select a Boolean operator.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(27, 0, 0, 0);
        Container_BooleanSearch.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.weightx = 2.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        Search.add(Container_BooleanSearch, gridBagConstraints);

        Container_Action.setBackground(new java.awt.Color(153, 204, 255));
        Container_Action.setMaximumSize(new java.awt.Dimension(1024, 100));
        Container_Action.setMinimumSize(new java.awt.Dimension(540, 68));
        Container_Action.setPreferredSize(new java.awt.Dimension(800, 34));
        Container_Action.setLayout(new java.awt.GridBagLayout());

        jButton_NewSearch.setText("New Search");
        jButton_NewSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NewSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(11, 25, 0, 25);
        Container_Action.add(jButton_NewSearch, gridBagConstraints);

        jButton_LoadSearch.setText("Load Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(11, 25, 0, 25);
        Container_Action.add(jButton_LoadSearch, gridBagConstraints);

        jButton_SaveSearch.setText("Save Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(11, 25, 0, 25);
        Container_Action.add(jButton_SaveSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 24, 10, 0);
        Search.add(Container_Action, gridBagConstraints);

        Container_QueryBuilder.setBackground(new java.awt.Color(237, 236, 236));
        Container_QueryBuilder.setBorder(javax.swing.BorderFactory.createTitledBorder("SQL Query"));
        Container_QueryBuilder.setLayout(new java.awt.GridBagLayout());

        jButton_SubmitSearch.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jButton_SubmitSearch.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 7, 12, 50);
        Container_QueryBuilder.add(jButton_SubmitSearch, gridBagConstraints);

        jTextField_SQLsearchQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_SQLsearchQueryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(14, 15, 14, 15);
        Container_QueryBuilder.add(jTextField_SQLsearchQuery, gridBagConstraints);

        jLabel_SearchString.setText("Search String");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 50, 20, 0);
        Container_QueryBuilder.add(jLabel_SearchString, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 50);
        Search.add(Container_QueryBuilder, gridBagConstraints);

        jTabbedPane2.setBackground(new java.awt.Color(238, 237, 237));
        jTabbedPane2.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel3_QueryGroups.setBackground(new java.awt.Color(238, 237, 237));
        jPanel3_QueryGroups.setLayout(new java.awt.GridBagLayout());

        jList_QueryGroups1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "QueryGroup1", "QueryGroup2", "QueryGroup3", "QueryGroup4", "QueryGroup5", "QueryGroup6", "QueryGroup7", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPanel_QueryGroups1.setViewportView(jList_QueryGroups1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanel3_QueryGroups.add(jScrollPanel_QueryGroups1, gridBagConstraints);

        jLabel_InstructionsLine3.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel_InstructionsLine3.setText("assign to Boolean search bins A or B.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        jPanel3_QueryGroups.add(jLabel_InstructionsLine3, gridBagConstraints);

        jLabel_InstructionsLine4.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel_InstructionsLine4.setText("Drag items or use the buttons to");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        jPanel3_QueryGroups.add(jLabel_InstructionsLine4, gridBagConstraints);

        jButton_AssignToBinA1.setText("Bin A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 100, 3, 20);
        jPanel3_QueryGroups.add(jButton_AssignToBinA1, gridBagConstraints);

        jButton_AssignToBinB1.setText("Bin B");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 3, 100);
        jPanel3_QueryGroups.add(jButton_AssignToBinB1, gridBagConstraints);

        jTabbedPane2.addTab("Query Groups", jPanel3_QueryGroups);

        jPanel3_ResultGroups.setBackground(new java.awt.Color(238, 237, 237));
        jPanel3_ResultGroups.setLayout(new java.awt.GridBagLayout());

        jList_QueryGroups3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "ResultGroup1", "ResultGroup2", "ResultGroup3", "ResultGroup4", "ResultGroup5", "ResultGroup6", "ResultGroup7" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPanel_QueryGroups3.setViewportView(jList_QueryGroups3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanel3_ResultGroups.add(jScrollPanel_QueryGroups3, gridBagConstraints);

        jLabel_InstructionsLine7.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel_InstructionsLine7.setText("assign to Boolean search bins A or B.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        jPanel3_ResultGroups.add(jLabel_InstructionsLine7, gridBagConstraints);

        jLabel_InstructionsLine8.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel_InstructionsLine8.setText("Drag items or use the buttons to");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        jPanel3_ResultGroups.add(jLabel_InstructionsLine8, gridBagConstraints);

        jButton_AssignToBinA3.setText("Bin A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 100, 3, 20);
        jPanel3_ResultGroups.add(jButton_AssignToBinA3, gridBagConstraints);

        jButton_AssignResultsToBinB.setText("Bin B");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 3, 100);
        jPanel3_ResultGroups.add(jButton_AssignResultsToBinB, gridBagConstraints);

        jTabbedPane2.addTab("Result Groups", jPanel3_ResultGroups);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        Search.add(jPanel2, gridBagConstraints);

        jTabbedPane1.addTab("Search", Search);

        Results.setBackground(new java.awt.Color(153, 204, 255));
        Results.setMaximumSize(new java.awt.Dimension(1024, 2400));
        Results.setMinimumSize(new java.awt.Dimension(600, 300));
        Results.setPreferredSize(new java.awt.Dimension(800, 500));
        Results.setLayout(new java.awt.GridBagLayout());

        jLabel_Results.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel_Results.setText("Results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 10, 0);
        Results.add(jLabel_Results, gridBagConstraints);

        jTable_ResultsWindow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_ResultsWindow.setAutoCreateRowSorter(true);
        jTable_ResultsWindow.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable_ResultsWindow.setMaximumSize(new java.awt.Dimension(1024, 2400));
        jTable_ResultsWindow.setMinimumSize(new java.awt.Dimension(600, 300));
        jTable_ResultsWindow.setPreferredSize(new java.awt.Dimension(900, 300));
        jTable_ResultsWindow.setRequestFocusEnabled(false);
        jTable_ResultsWindow.setRowMargin(2);
        jTable_ResultsWindow.setRowSelectionAllowed(false);
        jScrollPane_ResultsWindowScrollPanel.setViewportView(jTable_ResultsWindow);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(20, 50, 50, 50);
        Results.add(jScrollPane_ResultsWindowScrollPanel, gridBagConstraints);

        jButton_SaveResults.setText("Save Results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        Results.add(jButton_SaveResults, gridBagConstraints);

        jButton_ClearResults.setText("Clear Results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 0);
        Results.add(jButton_ClearResults, gridBagConstraints);

        ResultsGroup.setText("Make Query Group From Results Set");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 50);
        Results.add(ResultsGroup, gridBagConstraints);

        jTabbedPane1.addTab("Results", Results);

        Help.setBackground(new java.awt.Color(153, 204, 255));
        Help.setLayout(new java.awt.GridBagLayout());

        jLabel_Help.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel_Help.setText("Help");
        jLabel_Help.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel_Help.setVerifyInputWhenFocusTarget(false);
        jLabel_Help.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 10, 0);
        Help.add(jLabel_Help, gridBagConstraints);

        jTextArea_HelpContents.setColumns(20);
        jTextArea_HelpContents.setRows(5);
        jScrollPanel_HelpContentsScrollPanel.setViewportView(jTextArea_HelpContents);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 2.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 50, 50);
        Help.add(jScrollPanel_HelpContentsScrollPanel, gridBagConstraints);

        jTabbedPane1.addTab("Help", Help);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        jPanel1.add(jTabbedPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel1, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portnumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portnumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portnumberActionPerformed

    private void jButton_ConnectToDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ConnectToDBActionPerformed
        user = UserName.getText().trim();
        char[] pass = Password.getPassword();
        passStr = new String(pass);
        ip = IPAddress.getText().trim();
        db = DBName.getText().trim();
        dbport = portnumber.getText().trim();
        ConnectionName = DBConnection.getText().trim();
        connect = new DBConnect(ip,dbport,passStr, user, db, jLabel_ConnectToDBStatus,ConnectionName,jComboBox_RecentDBList);
        String query = "SELECT COLUMN_NAME" + "FROM INFORMATION_SCHEMA.COLUMNS" +
                       " WHERE TABLE_SCHEMA='"+db+"'" + 
                        " AND TABLE_NAME='Taxonomy'";
        ResultSet resultSet;
        resultSet = connect.getData(query);
        taxonomyFields = new ArrayList();
        try{
                while (resultSet.next()) {
                    String columnName = resultSet.getString("COLUMN_NAME");
                    System.out.println("Column Name: "+columnName);
                    taxonomyFields.add(columnName);
                }
        }
        catch(Exception ex){
               System.out.println("Error"+ex);
        }
        

        System.out.println("Username: "+user+"  Password Length: "+passStr);
        
        //jLabel_ConnectionStatus.setText("new Value");
    }//GEN-LAST:event_jButton_ConnectToDBActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void ReferenceDirectoryFolderPathTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReferenceDirectoryFolderPathTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReferenceDirectoryFolderPathTextBoxActionPerformed

    private void GroupDistancePathTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupDistancePathTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GroupDistancePathTextBoxActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void GroupModelDirectoryPathTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupModelDirectoryPathTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GroupModelDirectoryPathTextBoxActionPerformed

    private void GroupSingletonDirectoryPathTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupSingletonDirectoryPathTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GroupSingletonDirectoryPathTextBoxActionPerformed

    private void SequenceDatabasePathTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SequenceDatabasePathTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SequenceDatabasePathTextBoxActionPerformed

    private void CoreGenomeAccuracyThresholdTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoreGenomeAccuracyThresholdTextBoxActionPerformed
        
    }//GEN-LAST:event_CoreGenomeAccuracyThresholdTextBoxActionPerformed

    private void SequenceEValueTextBoxTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SequenceEValueTextBoxTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SequenceEValueTextBoxTextBoxActionPerformed

    private void DomainEValueTextBoxTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DomainEValueTextBoxTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DomainEValueTextBoxTextBoxActionPerformed

    private void IncludeSequenceEValueTextBoxTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncludeSequenceEValueTextBoxTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IncludeSequenceEValueTextBoxTextBoxActionPerformed

    private void IncludeDomainEvalueTextBoxTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncludeDomainEvalueTextBoxTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IncludeDomainEvalueTextBoxTextBoxActionPerformed

    private void AccuracyThresholdTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccuracyThresholdTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AccuracyThresholdTextBoxActionPerformed

    private void TargetCoverageTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TargetCoverageTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TargetCoverageTextBoxActionPerformed

    private void ChimeraSimilarityTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChimeraSimilarityTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChimeraSimilarityTextBoxActionPerformed

    private void jButton_LoadSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoadSettingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_LoadSettingsActionPerformed

    private void jButton_RunPipelineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RunPipelineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_RunPipelineActionPerformed

    private void jButton_EditGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EditGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_EditGroupActionPerformed

    private void jButton_BuildSQLqueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_BuildSQLqueryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_BuildSQLqueryActionPerformed

    private void jButton_NewSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NewSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_NewSearchActionPerformed

    private void jTextField_SQLsearchQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_SQLsearchQueryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_SQLsearchQueryActionPerformed

    private void IPAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IPAddressActionPerformed

    private void vennDiagramPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_vennDiagramPropertyChange
        // Jamie:
        //
        // This is vestigial. It can be removed if you remove the call to it as well.
        
    }//GEN-LAST:event_vennDiagramPropertyChange

    private void jComboBox_BooleanOperatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_BooleanOperatorActionPerformed
        // Jamie:
        //
        // This function responds to the jComboBox_BooleanOperator action event (user adjusts the AND / OR / NOT combo box)
        // and stores the value in the global String booleanSearchMode.
        //
        // It also replaces the vennDiagram icon according to the selected mode.
        
        // First, let's get the current value of the combobox and store in a temporary variable called booleanOperator
        String booleanOperator = jComboBox_BooleanOperator.getSelectedItem().toString();
        
        // Then, we update booleanSearchMode according to the switch case.
        switch (booleanOperator) {
            case "AND":
                booleanSearchMode = "AND";
                // Change the image icon accordingly
                vennDiagram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/2Venn-A-and-B.png")));
                break;
                
            case "OR":
                booleanSearchMode = "OR";
                // Change the image icon accordingly
                vennDiagram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/2Venn-A-or-B.png"))); 
                break;
                
            case "A NOT B":
                booleanSearchMode = "A NOT B";
                // Change the image icon accordingly
                vennDiagram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/2Venn-A-not-B.png")));
                break;
                
             case "B NOT A":
                booleanSearchMode = "B NOT A";
                // Change the image icon accordingly
                vennDiagram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/2Venn-B-not-A.png")));
                break;
                
            case "!AND":
                booleanSearchMode = "!AND";
                // Change the image icon accordingly
                vennDiagram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/2Venn-A-or-B-not-A-and-B.png")));
                break;
                
            case "!OR":
                booleanSearchMode = "!OR";
                // Change the image icon accordingly
                vennDiagram.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/2Venn.png")));
                break;
        }
    }//GEN-LAST:event_jComboBox_BooleanOperatorActionPerformed

    private void AccuracyThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AccuracyThresholdSliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        // if below 10, add another zero
        if (AccuracyThresholdSlider.getValue() < 10) {
            AccuracyThresholdTextBox.setText("0.0"+String.valueOf(AccuracyThresholdSlider.getValue()));
        }
        else if (AccuracyThresholdSlider.getValue() < 100) {
          // else just show value
           AccuracyThresholdTextBox.setText("0."+String.valueOf(AccuracyThresholdSlider.getValue()));
        }
        else {
           AccuracyThresholdTextBox.setText(String.valueOf(AccuracyThresholdSlider.getValue()));
        }      
    }//GEN-LAST:event_AccuracyThresholdSliderStateChanged

    private void SequenceIdentitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SequenceIdentitySliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        SequenceIdentityTextBox.setText(String.valueOf(SequenceIdentitySlider.getValue()));
    }//GEN-LAST:event_SequenceIdentitySliderStateChanged

    private void CoreGenomeAccuracyThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CoreGenomeAccuracyThresholdSliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        CoreGenomeAccuracyThresholdTextBox.setText(String.valueOf(CoreGenomeAccuracyThresholdSlider.getValue())); 
    }//GEN-LAST:event_CoreGenomeAccuracyThresholdSliderStateChanged

    private void CoreGenomeAccuracyThresholdTextBoxInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_CoreGenomeAccuracyThresholdTextBoxInputMethodTextChanged
        // Jamie -- garbage
    }//GEN-LAST:event_CoreGenomeAccuracyThresholdTextBoxInputMethodTextChanged

    private void CoreGenomeAccuracyThresholdTextBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CoreGenomeAccuracyThresholdTextBoxPropertyChange
        // Jamie: If user adjusts value of textBox, corresponding slider should change automatically
        // Taken from here: http://da2i.univ-lille1.fr/doc/tutorial-java/uiswing/components/slider.html
        if ("value".equals(evt.getPropertyName())) {
            Number value = (Number)evt.getNewValue();
            if (CoreGenomeAccuracyThresholdSlider != null && value != null) {
                CoreGenomeAccuracyThresholdSlider.setValue(value.intValue());
            }
        }    
    }//GEN-LAST:event_CoreGenomeAccuracyThresholdTextBoxPropertyChange

    private void CoreGenomeAccuracyThresholdTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CoreGenomeAccuracyThresholdTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            CoreGenomeAccuracyThresholdSlider.setValue(CoreGenomeAccuracyThresholdSlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            CoreGenomeAccuracyThresholdSlider.setValue(CoreGenomeAccuracyThresholdSlider.getValue()+1);
        } 
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            CoreGenomeAccuracyThresholdSlider.setValue( Integer.parseInt( CoreGenomeAccuracyThresholdTextBox.getText() ) );
        }
    }//GEN-LAST:event_CoreGenomeAccuracyThresholdTextBoxKeyPressed

    private void AccuracyThresholdTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AccuracyThresholdTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            AccuracyThresholdSlider.setValue(AccuracyThresholdSlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            AccuracyThresholdSlider.setValue(AccuracyThresholdSlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            
            // get the text from the box
            String trimLeadingZero = AccuracyThresholdTextBox.getText();

            //remove leading Zero if there is one
            if (trimLeadingZero.substring(0,1).equals("0")) {
                trimLeadingZero = trimLeadingZero.substring(1);
            }
            //remove leading . if there is one
            if (trimLeadingZero.substring(0,1).equals(".")) {
                trimLeadingZero = trimLeadingZero.substring(1);
            }
                        
            AccuracyThresholdSlider.setValue( Integer.parseInt( trimLeadingZero ) );
        }
    }//GEN-LAST:event_AccuracyThresholdTextBoxKeyPressed

    private void SequenceSimilaritySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SequenceSimilaritySliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        SequenceSimilarityTextBox.setText(String.valueOf(SequenceSimilaritySlider.getValue()));
    }//GEN-LAST:event_SequenceSimilaritySliderStateChanged

    private void SequenceIdentityTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SequenceIdentityTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40      
        if ( evt.getKeyCode() == 40){
            SequenceIdentitySlider.setValue(SequenceIdentitySlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            SequenceIdentitySlider.setValue(SequenceIdentitySlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            SequenceIdentitySlider.setValue( Integer.parseInt( SequenceIdentityTextBox.getText() ) );
        }
    }//GEN-LAST:event_SequenceIdentityTextBoxKeyPressed

    private void SequenceSimilarityTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SequenceSimilarityTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            SequenceSimilaritySlider.setValue(SequenceSimilaritySlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            SequenceSimilaritySlider.setValue(SequenceSimilaritySlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            SequenceSimilaritySlider.setValue( Integer.parseInt( SequenceSimilarityTextBox.getText() ) );
        }
    }//GEN-LAST:event_SequenceSimilarityTextBoxKeyPressed

    private void QueryCoverageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_QueryCoverageSliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        SequenceSimilarityTextBox.setText(String.valueOf(SequenceSimilaritySlider.getValue()));
    }//GEN-LAST:event_QueryCoverageSliderStateChanged

    private void QueryCoverageTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QueryCoverageTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            QueryCoverageSlider.setValue(QueryCoverageSlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            QueryCoverageSlider.setValue(QueryCoverageSlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            QueryCoverageSlider.setValue( Integer.parseInt( QueryCoverageTextBox.getText() ) );
        }
    }//GEN-LAST:event_QueryCoverageTextBoxKeyPressed

    private void TargetCoverageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TargetCoverageSliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        TargetCoverageTextBox.setText(String.valueOf(TargetCoverageSlider.getValue()));
    }//GEN-LAST:event_TargetCoverageSliderStateChanged

    private void TargetCoverageTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TargetCoverageTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            TargetCoverageSlider.setValue(TargetCoverageSlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            TargetCoverageSlider.setValue(TargetCoverageSlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            TargetCoverageSlider.setValue( Integer.parseInt( TargetCoverageTextBox.getText() ) );
        }
    }//GEN-LAST:event_TargetCoverageTextBoxKeyPressed

    private void MinimumPartialCoverageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MinimumPartialCoverageSliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        MinimumPartialCoverageTextBox.setText(String.valueOf(MinimumPartialCoverageSlider.getValue()));
    }//GEN-LAST:event_MinimumPartialCoverageSliderStateChanged

    private void MinimumPartialCoverageTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MinimumPartialCoverageTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            MinimumPartialCoverageSlider.setValue(MinimumPartialCoverageSlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            MinimumPartialCoverageSlider.setValue(MinimumPartialCoverageSlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            MinimumPartialCoverageSlider.setValue( Integer.parseInt( MinimumPartialCoverageTextBox.getText() ) );
        }
    }//GEN-LAST:event_MinimumPartialCoverageTextBoxKeyPressed

    private void ChimeraIdentitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ChimeraIdentitySliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        ChimeraIdentityTextBox.setText(String.valueOf(ChimeraIdentitySlider.getValue()));
    }//GEN-LAST:event_ChimeraIdentitySliderStateChanged

    private void ChimeraIdentityTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ChimeraIdentityTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            ChimeraIdentitySlider.setValue(ChimeraIdentitySlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            ChimeraIdentitySlider.setValue(ChimeraIdentitySlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            ChimeraIdentitySlider.setValue( Integer.parseInt( ChimeraIdentityTextBox.getText() ) );
        }
    }//GEN-LAST:event_ChimeraIdentityTextBoxKeyPressed

    private void ChimeraSimilaritySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ChimeraSimilaritySliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        ChimeraSimilarityTextBox.setText(String.valueOf(ChimeraSimilaritySlider.getValue()));
    }//GEN-LAST:event_ChimeraSimilaritySliderStateChanged

    private void ChimeraSimilarityTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ChimeraSimilarityTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            ChimeraSimilaritySlider.setValue(ChimeraSimilaritySlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            ChimeraSimilaritySlider.setValue(ChimeraSimilaritySlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            ChimeraSimilaritySlider.setValue( Integer.parseInt( ChimeraSimilarityTextBox.getText() ) );
        }
    }//GEN-LAST:event_ChimeraSimilarityTextBoxKeyPressed

    private void ChimeraAccuracySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ChimeraAccuracySliderStateChanged
        // Jamie: Use the value of the Slider to adjust value in TextField
        // if number is below 10, add another zero
        if ( ChimeraAccuracySlider.getValue() < 10) {
            ChimeraAccuracyTextBox.setText("0.0"+String.valueOf( ChimeraAccuracySlider.getValue()));
        }
        else if ( ChimeraAccuracySlider.getValue() < 100 )  {
            ChimeraAccuracyTextBox.setText("0."+String.valueOf(ChimeraAccuracySlider.getValue()));
        }
        else if ( ChimeraAccuracySlider.getValue() == 100 )  {
            ChimeraAccuracyTextBox.setText(String.valueOf(ChimeraAccuracySlider.getValue()));
        }
    }//GEN-LAST:event_ChimeraAccuracySliderStateChanged

    private void ChimeraAccuracyTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ChimeraAccuracyTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the corresponding slider value adjusts accordingly.
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40){
            ChimeraAccuracySlider.setValue(ChimeraAccuracySlider.getValue()-1);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38){
            ChimeraAccuracySlider.setValue(ChimeraAccuracySlider.getValue()+1);
        }
        // if ENTER (which is keycode 10) then send value to slider
        if ( evt.getKeyCode() == 10){
            String trimLeadingZero = ChimeraAccuracyTextBox.getText();
            //remove leading Zero if there is one
            if (trimLeadingZero.substring(0,1).equals("0")) {
                trimLeadingZero = trimLeadingZero.substring(1);
            }
            //remove leading . if there is one
            if (trimLeadingZero.substring(0,1).equals(".")) {
                trimLeadingZero = trimLeadingZero.substring(1);
            }
            
            ChimeraAccuracySlider.setValue( Integer.parseInt( trimLeadingZero ) );
        }
    }//GEN-LAST:event_ChimeraAccuracyTextBoxKeyPressed

    private void CoreGenomeAccuracyThresholdDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CoreGenomeAccuracyThresholdDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        CoreGenomeAccuracyThresholdSlider.setValue(90);
        CoreGenomeAccuracyThresholdTextBox.setText("90");
    }//GEN-LAST:event_CoreGenomeAccuracyThresholdDefaultMouseClicked

    private void CoreGenomeAccuracyThresholdDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoreGenomeAccuracyThresholdDefaultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CoreGenomeAccuracyThresholdDefaultActionPerformed

    private void AccuracyThresholdDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AccuracyThresholdDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        AccuracyThresholdSlider.setValue(85);
        AccuracyThresholdTextBox.setText("0.85");
    }//GEN-LAST:event_AccuracyThresholdDefaultMouseClicked

    private void SequenceIdentityDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SequenceIdentityDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        SequenceIdentitySlider.setValue(70);
        SequenceIdentityTextBox.setText("70");        
    }//GEN-LAST:event_SequenceIdentityDefaultMouseClicked

    private void SequenceSimilarityDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SequenceSimilarityDefaultMouseClicked
        // // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        SequenceSimilaritySlider.setValue(60);
        SequenceSimilarityTextBox.setText("60");       
    }//GEN-LAST:event_SequenceSimilarityDefaultMouseClicked

    private void QueryCoverageDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueryCoverageDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        QueryCoverageSlider.setValue(70);
        QueryCoverageTextBox.setText("70");               // TODO add your handling code here:
    }//GEN-LAST:event_QueryCoverageDefaultMouseClicked

    private void TargetCoverageDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TargetCoverageDefaultMouseClicked
        // // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        TargetCoverageSlider.setValue(70);
        TargetCoverageTextBox.setText("70");       
    }//GEN-LAST:event_TargetCoverageDefaultMouseClicked

    private void MinimumPartialCoverageDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimumPartialCoverageDefaultMouseClicked
        // // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        MinimumPartialCoverageSlider.setValue(5);
        MinimumPartialCoverageTextBox.setText("5");       
    }//GEN-LAST:event_MinimumPartialCoverageDefaultMouseClicked

    private void ChimeraIdentityDefaultKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ChimeraIdentityDefaultKeyPressed
     // Jamie: vestigial...
    }//GEN-LAST:event_ChimeraIdentityDefaultKeyPressed

    private void jButton_EditGroup1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EditGroup1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_EditGroup1ActionPerformed

    private void ReferenceDirectoryFolderLoaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReferenceDirectoryFolderLoaderActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = folderSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = folderSelector.getSelectedFile(); 
            // now add the file name to the text box
            ReferenceDirectoryFolderPathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }
        
    }//GEN-LAST:event_ReferenceDirectoryFolderLoaderActionPerformed

    private void SequenceIdentityTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SequenceIdentityTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SequenceIdentityTextBoxActionPerformed

    private void ChimeraIdentityDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChimeraIdentityDefaultMouseClicked
        // // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        ChimeraIdentitySlider.setValue(50);
        ChimeraIdentityTextBox.setText("50");   
    }//GEN-LAST:event_ChimeraIdentityDefaultMouseClicked

    private void ChimaraSimilarityDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChimaraSimilarityDefaultMouseClicked
        // // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        ChimeraSimilaritySlider.setValue(50);
        ChimeraSimilarityTextBox.setText("50");
    }//GEN-LAST:event_ChimaraSimilarityDefaultMouseClicked

    private void ChimeraAccuaracyDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChimeraAccuaracyDefaultMouseClicked
        // // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        ChimeraAccuracySlider.setValue(85);
        ChimeraAccuracyTextBox.setText("0.85");
    }//GEN-LAST:event_ChimeraAccuaracyDefaultMouseClicked

    private void NumberDomainDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NumberDomainDefaultMouseClicked
        // // Jamie: when default button is pressed, restore default values to textBox and Slider
        // Values are hard-coded for now. Ideally there should be a lookup table.
        NumberDomainSlider.setValue(1);
        NumberDomainComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_NumberDomainDefaultMouseClicked

    private void NumberDomainSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NumberDomainSliderStateChanged
        // Jamie: adjust slider automatically changes selected item in combobox
        NumberDomainComboBox.setSelectedIndex(NumberDomainSlider.getValue()-1); //JW: minus one because indexes start at zero
    }//GEN-LAST:event_NumberDomainSliderStateChanged

    private void QueryDirectoryFileLoaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryDirectoryFileLoaderActionPerformed
    // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = folderSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = folderSelector.getSelectedFile(); 
            // now add the file name to the text box
            QueryDirectoryFolderPathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }
    }//GEN-LAST:event_QueryDirectoryFileLoaderActionPerformed

    private void HMMDatabaseFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HMMDatabaseFileSelectorActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = fileSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileSelector.getSelectedFile(); 
            // now add the file name to the text box
            HMMDatabasePathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_HMMDatabaseFileSelectorActionPerformed

    private void GroupAlignmentDirectoryFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupAlignmentDirectoryFileSelectorActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = folderSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = folderSelector.getSelectedFile(); 
            // now add the file name to the text box
            GroupAlignmentDirectoryPathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }
    }//GEN-LAST:event_GroupAlignmentDirectoryFileSelectorActionPerformed

    private void GroupModelDirectoryFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupModelDirectoryFileSelectorActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = folderSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = folderSelector.getSelectedFile(); 
            // now add the file name to the text box
            GroupModelDirectoryPathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }
    }//GEN-LAST:event_GroupModelDirectoryFileSelectorActionPerformed

    private void GroupSingletonDirectoryFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupSingletonDirectoryFileSelectorActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = folderSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = folderSelector.getSelectedFile(); 
            // now add the file name to the text box
            GroupSingletonDirectoryPathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }
    }//GEN-LAST:event_GroupSingletonDirectoryFileSelectorActionPerformed

    private void SequenceDatabaseFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SequenceDatabaseFileSelectorActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = fileSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileSelector.getSelectedFile(); 
            // now add the file name to the text box
            SequenceDatabasePathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }       
    }//GEN-LAST:event_SequenceDatabaseFileSelectorActionPerformed

    private void GroupFileFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupFileFileSelectorActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = fileSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileSelector.getSelectedFile(); 
            // now add the file name to the text box
            GroupFilePathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }
    }//GEN-LAST:event_GroupFileFileSelectorActionPerformed

    private void GroupDistanceFileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupDistanceFileSelectorActionPerformed
        // Jamie:
        // This function opens a file chooser window.
        // taken from: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        int returnValue = fileSelector.showOpenDialog(HMM_ModelUI.this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileSelector.getSelectedFile(); 
            // now add the file name to the text box
            GroupDistancePathTextBox.setText(file.getPath());
        }
        else {
            System.out.println("Changed your mind, huh?");
        }
    }//GEN-LAST:event_GroupDistanceFileSelectorActionPerformed

    private void jLabel_ConnectedIconPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jLabel_ConnectedIconPropertyChange
        // Jamie: 
    }//GEN-LAST:event_jLabel_ConnectedIconPropertyChange

    private void SequenceEValueDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SequenceEValueDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox
        // Values are hard-coded for now. Ideally there should be a lookup table.
        SequenceEValueTextBox.setText("0.00001");
    }//GEN-LAST:event_SequenceEValueDefaultMouseClicked

    private void DomainEValueDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DomainEValueDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox
        // Values are hard-coded for now. Ideally there should be a lookup table.
        DomainEValueTextBox.setText("0.00001");
    }//GEN-LAST:event_DomainEValueDefaultMouseClicked

    private void IncludeSequenceEvalueDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IncludeSequenceEvalueDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox
        // Values are hard-coded for now. Ideally there should be a lookup table.
        IncludeSequenceEValueTextBox.setText("0.00001");
    }//GEN-LAST:event_IncludeSequenceEvalueDefaultMouseClicked

    private void IncludeDomainDefaultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IncludeDomainDefaultMouseClicked
        // Jamie: when default button is pressed, restore default values to textBox
        // Values are hard-coded for now. Ideally there should be a lookup table.
        IncludeDomainEvalueTextBox.setText("0.00001");
    }//GEN-LAST:event_IncludeDomainDefaultMouseClicked

    private void SequenceEValueTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SequenceEValueTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the value in the text box adjusts accordingly.
        /// NOTE: THIS IS BUGGY. NUMBERS DON'T ADD/SUBTRACT PROPERLY...
        double boxValue = Double.parseDouble(SequenceEValueTextBox.getText());
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40  && boxValue > 0.00001){
            boxValue = boxValue - 0.00001;
            SequenceEValueTextBox.setText(""+boxValue);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38 && boxValue < 1){
            boxValue = boxValue + 0.00001;
            SequenceEValueTextBox.setText(""+boxValue);
        }
    }//GEN-LAST:event_SequenceEValueTextBoxKeyPressed

    private void DomainEValueTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DomainEValueTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the value in the text box adjusts accordingly.
        /// NOTE: THIS IS BUGGY. NUMBERS DON'T ADD/SUBTRACT PROPERLY...
        double boxValue = Double.parseDouble(DomainEValueTextBox.getText());
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40  && boxValue > 0.00001){
            boxValue = boxValue - 0.00001;
            DomainEValueTextBox.setText(""+boxValue);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38 && boxValue < 1){
            boxValue = boxValue + 0.00001;
            DomainEValueTextBox.setText(""+boxValue);
        }
    }//GEN-LAST:event_DomainEValueTextBoxKeyPressed

    private void IncludeSequenceEValueTextBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IncludeSequenceEValueTextBoxKeyPressed
        // Jamie: If user presses up and down arrow keys, the value in the text box adjusts accordingly.
        /// NOTE: THIS IS BUGGY. NUMBERS DON'T ADD/SUBTRACT PROPERLY...
        double boxValue = Double.parseDouble(IncludeSequenceEValueTextBox.getText());
        // DOWN ARROW is keycode 40
        if ( evt.getKeyCode() == 40  && boxValue > 0.00001){
            boxValue = boxValue - 0.00001;
            IncludeSequenceEValueTextBox.setText(""+boxValue);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38 && boxValue < 1){
            boxValue = boxValue + 0.00001;
            IncludeSequenceEValueTextBox.setText(""+boxValue);
        }
    }//GEN-LAST:event_IncludeSequenceEValueTextBoxKeyPressed

    private void IncludeDomainEvalueTextBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IncludeDomainEvalueTextBoxMouseClicked
        // Jamie: If user presses up and down arrow keys, the value in the text box adjusts accordingly.
        /// NOTE: THIS IS BUGGY. NUMBERS DON'T ADD/SUBTRACT PROPERLY...
        double boxValue = Double.parseDouble(IncludeDomainEvalueTextBox.getText());
        // DOWN ARROW is keycode 40
      /*  if ( evt.getKeyCode() == 40  && boxValue > 0.00001){
            boxValue = boxValue - 0.00001;
            IncludeDomainEvalueTextBox.setText(""+boxValue);
        }
        // UP ARROW is keycode 38
        if ( evt.getKeyCode() == 38 && boxValue < 1){
            boxValue = boxValue + 0.00001;
            IncludeDomainEvalueTextBox.setText(""+boxValue);
        } */
    }//GEN-LAST:event_IncludeDomainEvalueTextBoxMouseClicked

    
    // Anu:
    // This function popuates the taxonomy tree on Query Search page.
    public void  populateTree(LinkedHashMap<String, ArrayList<String>> taxomonyTree) {
       searchQuerytreeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Taxonomy");  
       
       Set set = taxomonyTree.entrySet();
      // Get an iterator
      Iterator i = set.iterator();
      // Display elements
      while(i.hasNext()) {
         Map.Entry taxonomy = (Map.Entry)i.next();
         ArrayList taxonomyCategories = (ArrayList) taxonomy.getValue();
         DefaultMutableTreeNode parentNode = null;
         for (Object s : taxonomyCategories)
         {
             javax.swing.tree.DefaultMutableTreeNode treeNode = new javax.swing.tree.DefaultMutableTreeNode(s);
           
           TreePath parentPath= jTree_SearchFields.getSelectionPath();
           System.out.println("PARENTPATH "+parentPath);
           if (parentPath == null) 
           {
             parentNode = searchQuerytreeNode1;
          
           } 
           else 
           {
              parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
           } 
           parentNode.add(treeNode);
           TreePath selectedPath =new TreePath(treeNode.getPath());
           jTree_SearchFields.setSelectionPath(selectedPath);
           System.out.println("TREEPATH "+jTree_SearchFields.getSelectionPath());
         } 
         
         DefaultMutableTreeNode speciesNode = (DefaultMutableTreeNode) ((jTree_SearchFields.getSelectionPath()).getLastPathComponent());
         String speciesName = speciesNode.toString();
         List<Object> strains = (List<Object>) (connect.createSpeciesList(connect, db, speciesName));
         TreePath  strainsTreePath = new TreePath (strains.toArray());
         System.out.println("STRAINSTREEPATH "+strainsTreePath);
         //jTree_SearchFields.addSelectionPath(new TreePath(strains.toArray());
      }
        jTree_SearchFields.setRootVisible(true);                   
    }
      
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            /* Jamie: This is the original 'lookandfeel' setting
               for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            */
            // this is the new setting, as in: http://stackoverflow.com/questions/14968806/why-does-my-gui-never-look-right
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HMM_ModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HMM_ModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HMM_ModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HMM_ModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        // Jamie: update connection icon
        if (DBConnect.isConnected) {
             // jLabel_ConnectedIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/DB-connected.png")));
        }
        else {
             // jLabel_ConnectedIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/HMM_Model/DB-idle.png"))); 
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new HMM_ModelUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccuracyThresholdDefault;
    private javax.swing.JSlider AccuracyThresholdSlider;
    private javax.swing.JTextField AccuracyThresholdTextBox;
    private javax.swing.ButtonGroup AdjustHeader_buttonGroup;
    private javax.swing.JButton ChimaraSimilarityDefault;
    private javax.swing.JButton ChimeraAccuaracyDefault;
    private javax.swing.JSlider ChimeraAccuracySlider;
    private javax.swing.JTextField ChimeraAccuracyTextBox;
    private javax.swing.JButton ChimeraIdentityDefault;
    private javax.swing.JSlider ChimeraIdentitySlider;
    private javax.swing.JTextField ChimeraIdentityTextBox;
    private javax.swing.JSlider ChimeraSimilaritySlider;
    private javax.swing.JTextField ChimeraSimilarityTextBox;
    private javax.swing.JPanel ConnectToDB;
    private javax.swing.JPanel Container_Action;
    private javax.swing.JPanel Container_Analysis;
    private javax.swing.JPanel Container_BooleanSearch;
    private javax.swing.JPanel Container_CoreGenome;
    private javax.swing.JPanel Container_Database;
    private javax.swing.JPanel Container_Group;
    private javax.swing.JPanel Container_HMMERParameters;
    private javax.swing.JPanel Container_QueryBuilder;
    private javax.swing.JPanel Container_Reference;
    private javax.swing.JPanel Container_ResultParsingParameters;
    private javax.swing.JPanel Container_SaveLoadRun;
    private javax.swing.JPanel Container_SelectDB;
    private javax.swing.JPanel Container_Sequence;
    private javax.swing.JPanel Container_SequenceDirectory;
    private javax.swing.JPanel Container_Title;
    private javax.swing.JButton CoreGenomeAccuracyThresholdDefault;
    private javax.swing.JSlider CoreGenomeAccuracyThresholdSlider;
    private javax.swing.JTextField CoreGenomeAccuracyThresholdTextBox;
    private javax.swing.JTextField DBConnection;
    private javax.swing.JTextField DBName;
    private javax.swing.JButton DomainEValueDefault;
    private javax.swing.JTextField DomainEValueTextBox;
    private javax.swing.JButton GroupAlignmentDirectoryFileSelector;
    private javax.swing.JTextField GroupAlignmentDirectoryPathTextBox;
    private javax.swing.JButton GroupDistanceFileSelector;
    private javax.swing.JTextField GroupDistancePathTextBox;
    private javax.swing.JButton GroupFileFileSelector;
    private javax.swing.JTextField GroupFilePathTextBox;
    private javax.swing.JButton GroupModelDirectoryFileSelector;
    private javax.swing.JTextField GroupModelDirectoryPathTextBox;
    private javax.swing.JButton GroupSingletonDirectoryFileSelector;
    private javax.swing.JTextField GroupSingletonDirectoryPathTextBox;
    private javax.swing.JButton HMMDatabaseFileSelector;
    private javax.swing.JTextField HMMDatabasePathTextBox;
    private javax.swing.JPanel Help;
    private javax.swing.JPanel Home;
    private javax.swing.ButtonGroup HomologScan_buttonGroup;
    private javax.swing.JTextField IPAddress;
    private javax.swing.JButton IncludeDomainDefault;
    private javax.swing.JTextField IncludeDomainEvalueTextBox;
    private javax.swing.JTextField IncludeSequenceEValueTextBox;
    private javax.swing.JButton IncludeSequenceEvalueDefault;
    private javax.swing.ButtonGroup InputGroup_buttonGroup;
    private javax.swing.JButton MinimumPartialCoverageDefault;
    private javax.swing.JSlider MinimumPartialCoverageSlider;
    private javax.swing.JTextField MinimumPartialCoverageTextBox;
    private javax.swing.JComboBox NumberDomainComboBox;
    private javax.swing.JButton NumberDomainDefault;
    private javax.swing.JSlider NumberDomainSlider;
    private javax.swing.JPasswordField Password;
    private javax.swing.JPanel PipelineConfig;
    private javax.swing.JScrollPane PipelineConfigScrollPanel;
    private javax.swing.JPanel QueryBuilder;
    private javax.swing.JButton QueryCoverageDefault;
    private javax.swing.JSlider QueryCoverageSlider;
    private javax.swing.JTextField QueryCoverageTextBox;
    private javax.swing.JButton QueryDirectoryFileLoader;
    private javax.swing.JTextField QueryDirectoryFolderPathTextBox;
    private javax.swing.JButton ReferenceDirectoryFolderLoader;
    private javax.swing.JTextField ReferenceDirectoryFolderPathTextBox;
    private javax.swing.JPanel Results;
    private javax.swing.JButton ResultsGroup;
    private javax.swing.JPanel Search;
    private javax.swing.JButton SequenceDatabaseFileSelector;
    private javax.swing.JTextField SequenceDatabasePathTextBox;
    private javax.swing.JButton SequenceEValueDefault;
    private javax.swing.JTextField SequenceEValueTextBox;
    private javax.swing.JButton SequenceIdentityDefault;
    private javax.swing.JSlider SequenceIdentitySlider;
    private javax.swing.JTextField SequenceIdentityTextBox;
    private javax.swing.JButton SequenceSimilarityDefault;
    private javax.swing.JSlider SequenceSimilaritySlider;
    private javax.swing.JTextField SequenceSimilarityTextBox;
    private javax.swing.JButton TargetCoverageDefault;
    private javax.swing.JSlider TargetCoverageSlider;
    private javax.swing.JTextField TargetCoverageTextBox;
    private javax.swing.JTextField UserName;
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton_AssignResultsToBinB;
    private javax.swing.JButton jButton_AssignToBinA1;
    private javax.swing.JButton jButton_AssignToBinA3;
    private javax.swing.JButton jButton_AssignToBinB1;
    private javax.swing.JButton jButton_BuildSQLquery;
    private javax.swing.JButton jButton_ClearBinA;
    private javax.swing.JButton jButton_ClearBinB;
    private javax.swing.JButton jButton_ClearGroup;
    private javax.swing.JButton jButton_ClearRecentDBList;
    private javax.swing.JButton jButton_ClearResults;
    private javax.swing.JButton jButton_ConnectToDB;
    private javax.swing.JButton jButton_DefaultSettings;
    private javax.swing.JButton jButton_EditGroup;
    private javax.swing.JButton jButton_EditGroup1;
    private javax.swing.JButton jButton_LoadSearch;
    private javax.swing.JButton jButton_LoadSettings;
    private javax.swing.JButton jButton_NewSearch;
    private javax.swing.JButton jButton_RunPipeline;
    private javax.swing.JButton jButton_SaveResults;
    private javax.swing.JButton jButton_SaveSearch;
    private javax.swing.JButton jButton_SaveSettings;
    private javax.swing.JButton jButton_SubmitSearch;
    private javax.swing.JButton jButton_TestConnection;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JComboBox jComboBox_BooleanOperator;
    private javax.swing.JComboBox jComboBox_RecentDBList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel1_Subtitle;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_A;
    private javax.swing.JLabel jLabel_B;
    private javax.swing.JLabel jLabel_CSBDept;
    private javax.swing.JLabel jLabel_ConnectToDB;
    private javax.swing.JLabel jLabel_ConnectToDBStatus;
    private javax.swing.JLabel jLabel_ConnectedIcon;
    private javax.swing.JLabel jLabel_ConnectionName;
    private javax.swing.JLabel jLabel_ConnectionStatus;
    private javax.swing.JLabel jLabel_Database;
    private javax.swing.JLabel jLabel_GuttmanLab;
    private javax.swing.JLabel jLabel_Help;
    private javax.swing.JLabel jLabel_IPAddress2;
    private javax.swing.JLabel jLabel_InstructionsLine3;
    private javax.swing.JLabel jLabel_InstructionsLine4;
    private javax.swing.JLabel jLabel_InstructionsLine7;
    private javax.swing.JLabel jLabel_InstructionsLine8;
    private javax.swing.JLabel jLabel_Name1;
    private javax.swing.JLabel jLabel_Name2;
    private javax.swing.JLabel jLabel_Name3;
    private javax.swing.JLabel jLabel_Password;
    private javax.swing.JLabel jLabel_PipelineConfig;
    private javax.swing.JLabel jLabel_RecentDBs;
    private javax.swing.JLabel jLabel_Results;
    private javax.swing.JLabel jLabel_Search;
    private javax.swing.JLabel jLabel_SearchString;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JLabel jLabel_UniversityOfToronto;
    private javax.swing.JLabel jLabel_UserName;
    private javax.swing.JLabel jLabel_port;
    private javax.swing.JList jList_QueryGroups1;
    private javax.swing.JList jList_QueryGroups3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3_QueryGroups;
    private javax.swing.JPanel jPanel3_ResultGroups;
    private javax.swing.JPanel jPanel_BuildQueryGroup;
    private javax.swing.JPanel jPanel_ManageQueryGroups;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane_ResultsWindowScrollPanel;
    private javax.swing.JScrollPane jScrollPane_SearchFieldsScrollPanel;
    private javax.swing.JScrollPane jScrollPanel_HelpContentsScrollPanel;
    private javax.swing.JScrollPane jScrollPanel_QueryGroups1;
    private javax.swing.JScrollPane jScrollPanel_QueryGroups3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable_ResultsWindow;
    private javax.swing.JTextArea jTextArea_HelpContents;
    private javax.swing.JTextArea jTextArea_SearchBinA;
    private javax.swing.JTextArea jTextArea_SearchBinB;
    private javax.swing.JTextField jTextField_SQLsearchQuery;
    private javax.swing.JTree jTree1;
    private javax.swing.JTree jTree_SearchFields;
    private javax.swing.JTextField portnumber;
    private javax.swing.JLabel vennDiagram;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
